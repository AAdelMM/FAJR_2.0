
Fajer_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000a6c  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012e4  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b9b  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c30  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  0000377c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053b  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d8  00000000  00000000  00003e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000440b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	77 01       	movw	r14, r14
  7e:	7f 01       	movw	r14, r30
  80:	84 01       	movw	r16, r8
  82:	89 01       	movw	r16, r18
  84:	8e 01       	movw	r16, r28
  86:	96 01       	movw	r18, r12
  88:	9e 01       	movw	r18, r28
  8a:	a3 01       	movw	r20, r6
  8c:	a8 01       	movw	r20, r16

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ec e6       	ldi	r30, 0x6C	; 108
  a2:	fa e0       	ldi	r31, 0x0A	; 10
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	ae 32       	cpi	r26, 0x2E	; 46
  ac:	b1 07       	cpc	r27, r17
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	ae e2       	ldi	r26, 0x2E	; 46
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
  b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
  ba:	ae 32       	cpi	r26, 0x2E	; 46
  bc:	b2 07       	cpc	r27, r18
  be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
  c0:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
  c4:	0c 94 34 05 	jmp	0xa68	; 0xa68 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <appStart>:
 
#include "APP.h"
 
   
void appStart(){
  	 shiftInit();
  cc:	0e 94 b2 01 	call	0x364	; 0x364 <shiftInit>
	 lcd_init(); // Initialize the LCD
  d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_init>
	  uint8_t i=0;
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	01 c0       	rjmp	.+2      	; 0xda <appStart+0xe>
		  _delay_ms(1000);
		  
		  
		  i++;
		  if(i>15){
			i = 0;
  d8:	c0 e0       	ldi	r28, 0x00	; 0
	 lcd_init(); // Initialize the LCD
	  uint8_t i=0;
	  //application main loop
	  while (1) {
		  
		  lcd_command(0x80); // Set cursor at the beginning of the first line
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
		  lcd_string("Empironics..."); // Display a string on the LCD
  e0:	8c e1       	ldi	r24, 0x1C	; 28
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_string>
		  //PORTD |= (1 << SR_CLK_PIN);
		  PORTC |=(1 << 1);          //clock for lcd
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	88 b9       	out	0x08, r24	; 8
		  //PORTD &= ~(1 << SR_CLK_PIN);
		  PORTC &= ~(1 << 1);
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f e3       	ldi	r18, 0x3F	; 63
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <appStart+0x2e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <appStart+0x38>
 104:	00 00       	nop
		  _delay_ms(1000); // Wait for 1 second
		  
		  //lcd_command(0xC0); // Set cursor at the beginning of the second line
		  lcd_set_cursor(1,5);
 106:	65 e0       	ldi	r22, 0x05	; 5
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_set_cursor>
		  lcd_number(i);
 10e:	0c 2f       	mov	r16, r28
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	c8 01       	movw	r24, r16
 114:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_number>
		  dis_shiftOut(sevenSegment[i]);
 118:	f8 01       	movw	r30, r16
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	0e 94 df 01 	call	0x3be	; 0x3be <dis_shiftOut>
		  if(i>7){
 124:	c8 30       	cpi	r28, 0x08	; 8
 126:	50 f0       	brcs	.+20     	; 0x13c <appStart+0x70>
			exc_shiftOut(callsNumber[i-8]);
 128:	f8 01       	movw	r30, r16
 12a:	e4 5f       	subi	r30, 0xF4	; 244
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	80 81       	ld	r24, Z
 130:	0e 94 1f 02 	call	0x43e	; 0x43e <exc_shiftOut>
			inc_shiftOut(0);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 ff 01 	call	0x3fe	; 0x3fe <inc_shiftOut>
 13a:	09 c0       	rjmp	.+18     	; 0x14e <appStart+0x82>
		  }else{
			inc_shiftOut(callsNumber[i]);
 13c:	f8 01       	movw	r30, r16
 13e:	ec 5e       	subi	r30, 0xEC	; 236
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	80 81       	ld	r24, Z
 144:	0e 94 ff 01 	call	0x3fe	; 0x3fe <inc_shiftOut>
			exc_shiftOut(0);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 1f 02 	call	0x43e	; 0x43e <exc_shiftOut>
		  }
		 moveTEST(i);
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 61 01 	call	0x2c2	; 0x2c2 <moveTEST>
 154:	2f e3       	ldi	r18, 0x3F	; 63
 156:	8d e0       	ldi	r24, 0x0D	; 13
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <appStart+0x8e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <appStart+0x98>
 164:	00 00       	nop
		  
		//  lcd_string("Ahmed"); // Display another string on the LCD
		  _delay_ms(1000); // Wait for 1 second
		  lcd_command(0x01);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
 16c:	2f e3       	ldi	r18, 0x3F	; 63
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <appStart+0xa6>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <appStart+0xb0>
 17c:	00 00       	nop
		  _delay_ms(1000);
		  
		  
		  i++;
 17e:	cf 5f       	subi	r28, 0xFF	; 255
		  if(i>15){
 180:	c0 31       	cpi	r28, 0x10	; 16
 182:	08 f0       	brcs	.+2      	; 0x186 <appStart+0xba>
 184:	a9 cf       	rjmp	.-174    	; 0xd8 <appStart+0xc>
 186:	a9 cf       	rjmp	.-174    	; 0xda <appStart+0xe>

00000188 <lcd_command>:

 void lcd_command(unsigned char cmd) //sending commands to LCD to control enable and disable it
 {
	
	//LCD_PORT = cmd; //to pass data to LCD
	lcd_shiftOut(cmd);
 188:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_shiftOut>
	PORTD &= ~(1 << LCD_RS); //set RS pin low for command mode
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7e       	andi	r24, 0xEF	; 239
 190:	8b b9       	out	0x0b, r24	; 11
	PORTA |= (1 << LCD_EN); //set EN high to enable LCd
 192:	82 b1       	in	r24, 0x02	; 2
 194:	88 60       	ori	r24, 0x08	; 8
 196:	82 b9       	out	0x02, r24	; 2
 198:	83 ec       	ldi	r24, 0xC3	; 195
 19a:	99 e0       	ldi	r25, 0x09	; 9
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_command+0x14>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_command+0x1a>
 1a2:	00 00       	nop
	_delay_ms(10);
	PORTA &= ~(1 << LCD_EN); //set EN low to disable LCD
 1a4:	82 b1       	in	r24, 0x02	; 2
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	90 e1       	ldi	r25, 0x10	; 16
 1ac:	9a 95       	dec	r25
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_command+0x24>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_command+0x2a>
 1b2:	08 95       	ret

000001b4 <lcd_init>:

 void lcd_init(void)
 {
	//set LCD data port as output
	//LCD_PORT = 0x00; // use it when lcd connected directly
	DDRD |= (1 << LCD_RS); 
 1b4:	8a b1       	in	r24, 0x0a	; 10
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	8a b9       	out	0x0a, r24	; 10
	DDRA |= (1 << LCD_EN); 
 1ba:	81 b1       	in	r24, 0x01	; 1
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1 << LCD_EN); //set PA3 low
 1c0:	82 b1       	in	r24, 0x02	; 2
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	87 ea       	ldi	r24, 0xA7	; 167
 1c8:	91 e6       	ldi	r25, 0x61	; 97
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x16>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0x1c>
 1d0:	00 00       	nop
	//wait for LCD to power up
	_delay_ms(100);

	// send initialization commands to LCD

	lcd_command(0x38); //8-bit mode, 2-line display, 5*8 font
 1d2:	88 e3       	ldi	r24, 0x38	; 56
 1d4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
	lcd_command(0x0C); // Display on, cursor off, blink off
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
	lcd_command(0x01); //clear display
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
	lcd_command(0x06); //increment cursor, no shift 
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
 1ea:	08 95       	ret

000001ec <lcd_data>:
 }

 void lcd_data(unsigned char data)
 {
	//LCD_PORT = data; //send data using whole port
	lcd_shiftOut(data); //send data using shift register
 1ec:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_shiftOut>
	PORTD |= (1 << LCD_RS); //set RS high for data mode
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	8b b9       	out	0x0b, r24	; 11
	PORTA |= (1 << LCD_EN); // Set EN pin high to enable LCD
 1f6:	82 b1       	in	r24, 0x02	; 2
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_data+0x12>
 202:	00 00       	nop
	_delay_us(10);
	PORTA &= ~(1 << LCD_EN); // Set EN pin low to disable LCD
 204:	82 b1       	in	r24, 0x02	; 2
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	82 b9       	out	0x02, r24	; 2
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_data+0x20>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_data+0x26>
 212:	08 95       	ret

00000214 <lcd_string>:
	_delay_us(50);
 }

 void lcd_string(char *str)
 {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	while(*str)
 21a:	03 c0       	rjmp	.+6      	; 0x222 <lcd_string+0xe>
	{
		lcd_data(*str++);
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_data>
	_delay_us(50);
 }

 void lcd_string(char *str)
 {
	while(*str)
 222:	88 81       	ld	r24, Y
 224:	81 11       	cpse	r24, r1
 226:	fa cf       	rjmp	.-12     	; 0x21c <lcd_string+0x8>
	{
		lcd_data(*str++);
	}
 }
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_number>:
 void lcd_number(int num) {
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	60 97       	sbiw	r28, 0x10	; 16
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
	 // Display an integer number on the LCD
	 char str[16];
	 sprintf(str, "%d", num);
 246:	9f 93       	push	r25
 248:	8f 93       	push	r24
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	9f 93       	push	r25
 250:	8f 93       	push	r24
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	9f 93       	push	r25
 258:	8f 93       	push	r24
 25a:	0e 94 4a 02 	call	0x494	; 0x494 <sprintf>

	 for (int i = 0; i < 16; i++) {
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	00 e0       	ldi	r16, 0x00	; 0
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	0d c0       	rjmp	.+26     	; 0x28a <lcd_number+0x5c>
		 if (str[i] == '\0') {
 270:	e1 e0       	ldi	r30, 0x01	; 1
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ec 0f       	add	r30, r28
 276:	fd 1f       	adc	r31, r29
 278:	e0 0f       	add	r30, r16
 27a:	f1 1f       	adc	r31, r17
 27c:	80 81       	ld	r24, Z
 27e:	88 23       	and	r24, r24
 280:	39 f0       	breq	.+14     	; 0x290 <lcd_number+0x62>
			 break; // End of string
		 }
		 lcd_data(str[i]);
 282:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_data>
 void lcd_number(int num) {
	 // Display an integer number on the LCD
	 char str[16];
	 sprintf(str, "%d", num);

	 for (int i = 0; i < 16; i++) {
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	00 31       	cpi	r16, 0x10	; 16
 28c:	11 05       	cpc	r17, r1
 28e:	84 f3       	brlt	.-32     	; 0x270 <lcd_number+0x42>
		 if (str[i] == '\0') {
			 break; // End of string
		 }
		 lcd_data(str[i]);
	 }
 }
 290:	60 96       	adiw	r28, 0x10	; 16
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <lcd_set_cursor>:
 // set cursor position row,col row value 0,1
 void lcd_set_cursor(uint8_t row, uint8_t col) {
	 // Set the cursor position to the specified row and column
	 if (row == 0) {
 2a6:	81 11       	cpse	r24, r1
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <lcd_set_cursor+0xe>
		 // Set the DDRAM address for the first row
		 lcd_command(0x80 + col);
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	86 0f       	add	r24, r22
 2ae:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
 2b2:	08 95       	ret
		 } else if (row == 1) {
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <lcd_set_cursor+0x1a>
		 // Set the DDRAM address for the second row
		 lcd_command(0x80 + 0x40 + col);
 2b8:	80 ec       	ldi	r24, 0xC0	; 192
 2ba:	86 0f       	add	r24, r22
 2bc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
 2c0:	08 95       	ret

000002c2 <moveTEST>:
 #include "MOV.h"
 

 

 void moveTEST(uint8_t relay){
 2c2:	e8 2f       	mov	r30, r24
	DDRC |= (1 << Delta);
 2c4:	87 b1       	in	r24, 0x07	; 7
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // movement pins as outputs
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	84 b9       	out	0x04, r24	; 4
	if(relay > 8){
 2ce:	e9 30       	cpi	r30, 0x09	; 9
 2d0:	20 f0       	brcs	.+8      	; 0x2da <moveTEST+0x18>
		PORTB = 0x00;
 2d2:	15 b8       	out	0x05, r1	; 5
		PORTC &= ~(1 << Delta);
 2d4:	88 b1       	in	r24, 0x08	; 8
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	88 b9       	out	0x08, r24	; 8
	}
	switch (relay)
 2da:	8e 2f       	mov	r24, r30
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	89 30       	cpi	r24, 0x09	; 9
 2e0:	91 05       	cpc	r25, r1
 2e2:	d8 f5       	brcc	.+118    	; 0x35a <moveTEST+0x98>
 2e4:	fc 01       	movw	r30, r24
 2e6:	e2 5c       	subi	r30, 0xC2	; 194
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	0c 94 44 02 	jmp	0x488	; 0x488 <__tablejump2__>
	{
		case 0:
			PORTB = 0x00;
 2ee:	15 b8       	out	0x05, r1	; 5
			PORTC &= ~(1<< Delta);
 2f0:	88 b1       	in	r24, 0x08	; 8
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	88 b9       	out	0x08, r24	; 8
			PORTB |= (1 << Lamp);
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	85 b9       	out	0x05, r24	; 5
			break;
 2fc:	08 95       	ret
		case 1:
			PORTB = 0x00;
 2fe:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << Cam);
 300:	85 b1       	in	r24, 0x05	; 5
 302:	88 60       	ori	r24, 0x08	; 8
 304:	85 b9       	out	0x05, r24	; 5
			break;
 306:	08 95       	ret
		case 2:
			PORTB = 0x00;
 308:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << Fast);
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	85 b9       	out	0x05, r24	; 5
			break;
 310:	08 95       	ret
		case 3:
			PORTB = 0x00;
 312:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << Slow);
 314:	85 b1       	in	r24, 0x05	; 5
 316:	80 64       	ori	r24, 0x40	; 64
 318:	85 b9       	out	0x05, r24	; 5
			break;
 31a:	08 95       	ret
		case 4:
			PORTB = 0x00;
 31c:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << PhN);
 31e:	85 b1       	in	r24, 0x05	; 5
 320:	81 60       	ori	r24, 0x01	; 1
 322:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << Down);
 324:	85 b1       	in	r24, 0x05	; 5
 326:	80 62       	ori	r24, 0x20	; 32
 328:	85 b9       	out	0x05, r24	; 5
			break;
 32a:	08 95       	ret
		case 5:
			PORTB = 0x00;
 32c:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << PhN);
 32e:	85 b1       	in	r24, 0x05	; 5
 330:	81 60       	ori	r24, 0x01	; 1
 332:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << Up);
 334:	85 b1       	in	r24, 0x05	; 5
 336:	80 61       	ori	r24, 0x10	; 16
 338:	85 b9       	out	0x05, r24	; 5
			break;
 33a:	08 95       	ret
		case 6:
			PORTB = 0x00;
 33c:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << PhN);
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	81 60       	ori	r24, 0x01	; 1
 342:	85 b9       	out	0x05, r24	; 5
			break;
 344:	08 95       	ret
		case 7:
			PORTB = 0x00;
 346:	15 b8       	out	0x05, r1	; 5
			PORTB |= (1 << Star);
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	84 60       	ori	r24, 0x04	; 4
 34c:	85 b9       	out	0x05, r24	; 5
			break;
 34e:	08 95       	ret
		case 8:
			PORTB = 0x00;
 350:	15 b8       	out	0x05, r1	; 5
			PORTC |= (1 << Delta);
 352:	88 b1       	in	r24, 0x08	; 8
 354:	81 60       	ori	r24, 0x01	; 1
 356:	88 b9       	out	0x08, r24	; 8
			break;
 358:	08 95       	ret
		default:
			PORTB = 0x00;
 35a:	15 b8       	out	0x05, r1	; 5
			PORTC &= (1 << Delta);
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	81 70       	andi	r24, 0x01	; 1
 360:	88 b9       	out	0x08, r24	; 8
 362:	08 95       	ret

00000364 <shiftInit>:
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
}

void lcd_shiftReset(void) {
	PORTD &= ~(1 << SR_LATCH_PIN);
 364:	8a b1       	in	r24, 0x0a	; 10
 366:	80 6e       	ori	r24, 0xE0	; 224
 368:	8a b9       	out	0x0a, r24	; 10
 36a:	87 b1       	in	r24, 0x07	; 7
 36c:	8e 60       	ori	r24, 0x0E	; 14
 36e:	87 b9       	out	0x07, r24	; 7
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	8f 7b       	andi	r24, 0xBF	; 191
 374:	8b b9       	out	0x0b, r24	; 11
 376:	88 b1       	in	r24, 0x08	; 8
 378:	8d 7f       	andi	r24, 0xFD	; 253
 37a:	88 b9       	out	0x08, r24	; 8
 37c:	08 95       	ret

0000037e <lcd_shiftOut>:
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	18 c0       	rjmp	.+48     	; 0x3b2 <lcd_shiftOut+0x34>
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	09 2e       	mov	r0, r25
 388:	02 c0       	rjmp	.+4      	; 0x38e <lcd_shiftOut+0x10>
 38a:	35 95       	asr	r19
 38c:	27 95       	ror	r18
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <lcd_shiftOut+0xc>
 392:	20 ff       	sbrs	r18, 0
 394:	04 c0       	rjmp	.+8      	; 0x39e <lcd_shiftOut+0x20>
 396:	2b b1       	in	r18, 0x0b	; 11
 398:	20 62       	ori	r18, 0x20	; 32
 39a:	2b b9       	out	0x0b, r18	; 11
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <lcd_shiftOut+0x26>
 39e:	2b b1       	in	r18, 0x0b	; 11
 3a0:	2f 7d       	andi	r18, 0xDF	; 223
 3a2:	2b b9       	out	0x0b, r18	; 11
 3a4:	28 b1       	in	r18, 0x08	; 8
 3a6:	22 60       	ori	r18, 0x02	; 2
 3a8:	28 b9       	out	0x08, r18	; 8
 3aa:	28 b1       	in	r18, 0x08	; 8
 3ac:	2d 7f       	andi	r18, 0xFD	; 253
 3ae:	28 b9       	out	0x08, r18	; 8
 3b0:	9f 5f       	subi	r25, 0xFF	; 255
 3b2:	98 30       	cpi	r25, 0x08	; 8
 3b4:	30 f3       	brcs	.-52     	; 0x382 <lcd_shiftOut+0x4>
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	8b b9       	out	0x0b, r24	; 11
 3bc:	08 95       	ret

000003be <dis_shiftOut>:
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	18 c0       	rjmp	.+48     	; 0x3f2 <dis_shiftOut+0x34>
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	09 2e       	mov	r0, r25
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <dis_shiftOut+0x10>
 3ca:	35 95       	asr	r19
 3cc:	27 95       	ror	r18
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <dis_shiftOut+0xc>
 3d2:	20 ff       	sbrs	r18, 0
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <dis_shiftOut+0x20>
 3d6:	2b b1       	in	r18, 0x0b	; 11
 3d8:	20 62       	ori	r18, 0x20	; 32
 3da:	2b b9       	out	0x0b, r18	; 11
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <dis_shiftOut+0x26>
 3de:	2b b1       	in	r18, 0x0b	; 11
 3e0:	2f 7d       	andi	r18, 0xDF	; 223
 3e2:	2b b9       	out	0x0b, r18	; 11
 3e4:	2b b1       	in	r18, 0x0b	; 11
 3e6:	20 64       	ori	r18, 0x40	; 64
 3e8:	2b b9       	out	0x0b, r18	; 11
 3ea:	2b b1       	in	r18, 0x0b	; 11
 3ec:	2f 7b       	andi	r18, 0xBF	; 191
 3ee:	2b b9       	out	0x0b, r18	; 11
 3f0:	9f 5f       	subi	r25, 0xFF	; 255
 3f2:	98 30       	cpi	r25, 0x08	; 8
 3f4:	30 f3       	brcs	.-52     	; 0x3c2 <dis_shiftOut+0x4>
 3f6:	8b b1       	in	r24, 0x0b	; 11
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8b b9       	out	0x0b, r24	; 11
 3fc:	08 95       	ret

000003fe <inc_shiftOut>:
}

void inc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	18 c0       	rjmp	.+48     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		if (data & (1 << i)) {
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	09 2e       	mov	r0, r25
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	35 95       	asr	r19
 40c:	27 95       	ror	r18
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	20 ff       	sbrs	r18, 0
 414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			PORTD |= (1 << SR_DATA_PIN);
 416:	2b b1       	in	r18, 0x0b	; 11
 418:	20 62       	ori	r18, 0x20	; 32
 41a:	2b b9       	out	0x0b, r18	; 11
 41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			} else {
			PORTD &= ~(1 << SR_DATA_PIN);
 41e:	2b b1       	in	r18, 0x0b	; 11
 420:	2f 7d       	andi	r18, 0xDF	; 223
 422:	2b b9       	out	0x0b, r18	; 11
		}
		
		PORTC |= (1 << INC_CLK_PIN);
 424:	28 b1       	in	r18, 0x08	; 8
 426:	24 60       	ori	r18, 0x04	; 4
 428:	28 b9       	out	0x08, r18	; 8
		PORTC &= ~(1 << INC_CLK_PIN);
 42a:	28 b1       	in	r18, 0x08	; 8
 42c:	2b 7f       	andi	r18, 0xFB	; 251
 42e:	28 b9       	out	0x08, r18	; 8
void lcd_shiftReset(void) {
	PORTD &= ~(1 << SR_LATCH_PIN);
}

void inc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	98 30       	cpi	r25, 0x08	; 8
 434:	30 f3       	brcs	.-52     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		PORTC |= (1 << INC_CLK_PIN);
		PORTC &= ~(1 << INC_CLK_PIN);
	}
	
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
 436:	8b b1       	in	r24, 0x0b	; 11
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	8b b9       	out	0x0b, r24	; 11
 43c:	08 95       	ret

0000043e <exc_shiftOut>:
}
void exc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	18 c0       	rjmp	.+48     	; 0x472 <exc_shiftOut+0x34>
		if (data & (1 << i)) {
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	09 2e       	mov	r0, r25
 448:	02 c0       	rjmp	.+4      	; 0x44e <exc_shiftOut+0x10>
 44a:	35 95       	asr	r19
 44c:	27 95       	ror	r18
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <exc_shiftOut+0xc>
 452:	20 ff       	sbrs	r18, 0
 454:	04 c0       	rjmp	.+8      	; 0x45e <exc_shiftOut+0x20>
			PORTD |= (1 << SR_DATA_PIN);
 456:	2b b1       	in	r18, 0x0b	; 11
 458:	20 62       	ori	r18, 0x20	; 32
 45a:	2b b9       	out	0x0b, r18	; 11
 45c:	03 c0       	rjmp	.+6      	; 0x464 <exc_shiftOut+0x26>
			} else {
			PORTD &= ~(1 << SR_DATA_PIN);
 45e:	2b b1       	in	r18, 0x0b	; 11
 460:	2f 7d       	andi	r18, 0xDF	; 223
 462:	2b b9       	out	0x0b, r18	; 11
		}
		
		PORTC |= (1 << EXC_CLK_PIN);
 464:	28 b1       	in	r18, 0x08	; 8
 466:	28 60       	ori	r18, 0x08	; 8
 468:	28 b9       	out	0x08, r18	; 8
		PORTC &= ~(1 << EXC_CLK_PIN);
 46a:	28 b1       	in	r18, 0x08	; 8
 46c:	27 7f       	andi	r18, 0xF7	; 247
 46e:	28 b9       	out	0x08, r18	; 8
	
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
}
void exc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	98 30       	cpi	r25, 0x08	; 8
 474:	30 f3       	brcs	.-52     	; 0x442 <exc_shiftOut+0x4>
		PORTC |= (1 << EXC_CLK_PIN);
		PORTC &= ~(1 << EXC_CLK_PIN);
	}
	
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
 476:	8b b1       	in	r24, 0x0b	; 11
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	8b b9       	out	0x0b, r24	; 11
 47c:	08 95       	ret

0000047e <main>:
#include "./APPLICATION/APP.h"

int main() {
 	
 	
 	appStart();
 47e:	0e 94 66 00 	call	0xcc	; 0xcc <appStart>
 	
	return 0;
 }
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	08 95       	ret

00000488 <__tablejump2__>:
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	05 90       	lpm	r0, Z+
 48e:	f4 91       	lpm	r31, Z
 490:	e0 2d       	mov	r30, r0
 492:	09 94       	ijmp

00000494 <sprintf>:
 494:	ae e0       	ldi	r26, 0x0E	; 14
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e0 e5       	ldi	r30, 0x50	; 80
 49a:	f2 e0       	ldi	r31, 0x02	; 2
 49c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__prologue_saves__+0x1c>
 4a0:	0d 89       	ldd	r16, Y+21	; 0x15
 4a2:	1e 89       	ldd	r17, Y+22	; 0x16
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	8c 83       	std	Y+4, r24	; 0x04
 4a8:	1a 83       	std	Y+2, r17	; 0x02
 4aa:	09 83       	std	Y+1, r16	; 0x01
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	9f e7       	ldi	r25, 0x7F	; 127
 4b0:	9e 83       	std	Y+6, r25	; 0x06
 4b2:	8d 83       	std	Y+5, r24	; 0x05
 4b4:	ae 01       	movw	r20, r28
 4b6:	47 5e       	subi	r20, 0xE7	; 231
 4b8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ba:	6f 89       	ldd	r22, Y+23	; 0x17
 4bc:	78 8d       	ldd	r23, Y+24	; 0x18
 4be:	ce 01       	movw	r24, r28
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <vfprintf>
 4c6:	ef 81       	ldd	r30, Y+7	; 0x07
 4c8:	f8 85       	ldd	r31, Y+8	; 0x08
 4ca:	e0 0f       	add	r30, r16
 4cc:	f1 1f       	adc	r31, r17
 4ce:	10 82       	st	Z, r1
 4d0:	2e 96       	adiw	r28, 0x0e	; 14
 4d2:	e4 e0       	ldi	r30, 0x04	; 4
 4d4:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__epilogue_restores__+0x1c>

000004d8 <vfprintf>:
 4d8:	ab e0       	ldi	r26, 0x0B	; 11
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e2 e7       	ldi	r30, 0x72	; 114
 4de:	f2 e0       	ldi	r31, 0x02	; 2
 4e0:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__prologue_saves__>
 4e4:	6c 01       	movw	r12, r24
 4e6:	7b 01       	movw	r14, r22
 4e8:	8a 01       	movw	r16, r20
 4ea:	fc 01       	movw	r30, r24
 4ec:	17 82       	std	Z+7, r1	; 0x07
 4ee:	16 82       	std	Z+6, r1	; 0x06
 4f0:	83 81       	ldd	r24, Z+3	; 0x03
 4f2:	81 ff       	sbrs	r24, 1
 4f4:	cc c1       	rjmp	.+920    	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	3c 01       	movw	r6, r24
 4fc:	f6 01       	movw	r30, r12
 4fe:	93 81       	ldd	r25, Z+3	; 0x03
 500:	f7 01       	movw	r30, r14
 502:	93 fd       	sbrc	r25, 3
 504:	85 91       	lpm	r24, Z+
 506:	93 ff       	sbrs	r25, 3
 508:	81 91       	ld	r24, Z+
 50a:	7f 01       	movw	r14, r30
 50c:	88 23       	and	r24, r24
 50e:	09 f4       	brne	.+2      	; 0x512 <vfprintf+0x3a>
 510:	ba c1       	rjmp	.+884    	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 512:	85 32       	cpi	r24, 0x25	; 37
 514:	39 f4       	brne	.+14     	; 0x524 <vfprintf+0x4c>
 516:	93 fd       	sbrc	r25, 3
 518:	85 91       	lpm	r24, Z+
 51a:	93 ff       	sbrs	r25, 3
 51c:	81 91       	ld	r24, Z+
 51e:	7f 01       	movw	r14, r30
 520:	85 32       	cpi	r24, 0x25	; 37
 522:	29 f4       	brne	.+10     	; 0x52e <vfprintf+0x56>
 524:	b6 01       	movw	r22, r12
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 52c:	e7 cf       	rjmp	.-50     	; 0x4fc <vfprintf+0x24>
 52e:	91 2c       	mov	r9, r1
 530:	21 2c       	mov	r2, r1
 532:	31 2c       	mov	r3, r1
 534:	ff e1       	ldi	r31, 0x1F	; 31
 536:	f3 15       	cp	r31, r3
 538:	d8 f0       	brcs	.+54     	; 0x570 <vfprintf+0x98>
 53a:	8b 32       	cpi	r24, 0x2B	; 43
 53c:	79 f0       	breq	.+30     	; 0x55c <vfprintf+0x84>
 53e:	38 f4       	brcc	.+14     	; 0x54e <vfprintf+0x76>
 540:	80 32       	cpi	r24, 0x20	; 32
 542:	79 f0       	breq	.+30     	; 0x562 <vfprintf+0x8a>
 544:	83 32       	cpi	r24, 0x23	; 35
 546:	a1 f4       	brne	.+40     	; 0x570 <vfprintf+0x98>
 548:	23 2d       	mov	r18, r3
 54a:	20 61       	ori	r18, 0x10	; 16
 54c:	1d c0       	rjmp	.+58     	; 0x588 <vfprintf+0xb0>
 54e:	8d 32       	cpi	r24, 0x2D	; 45
 550:	61 f0       	breq	.+24     	; 0x56a <vfprintf+0x92>
 552:	80 33       	cpi	r24, 0x30	; 48
 554:	69 f4       	brne	.+26     	; 0x570 <vfprintf+0x98>
 556:	23 2d       	mov	r18, r3
 558:	21 60       	ori	r18, 0x01	; 1
 55a:	16 c0       	rjmp	.+44     	; 0x588 <vfprintf+0xb0>
 55c:	83 2d       	mov	r24, r3
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	38 2e       	mov	r3, r24
 562:	e3 2d       	mov	r30, r3
 564:	e4 60       	ori	r30, 0x04	; 4
 566:	3e 2e       	mov	r3, r30
 568:	2a c0       	rjmp	.+84     	; 0x5be <vfprintf+0xe6>
 56a:	f3 2d       	mov	r31, r3
 56c:	f8 60       	ori	r31, 0x08	; 8
 56e:	1d c0       	rjmp	.+58     	; 0x5aa <vfprintf+0xd2>
 570:	37 fc       	sbrc	r3, 7
 572:	2d c0       	rjmp	.+90     	; 0x5ce <vfprintf+0xf6>
 574:	20 ed       	ldi	r18, 0xD0	; 208
 576:	28 0f       	add	r18, r24
 578:	2a 30       	cpi	r18, 0x0A	; 10
 57a:	40 f0       	brcs	.+16     	; 0x58c <vfprintf+0xb4>
 57c:	8e 32       	cpi	r24, 0x2E	; 46
 57e:	b9 f4       	brne	.+46     	; 0x5ae <vfprintf+0xd6>
 580:	36 fc       	sbrc	r3, 6
 582:	81 c1       	rjmp	.+770    	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 584:	23 2d       	mov	r18, r3
 586:	20 64       	ori	r18, 0x40	; 64
 588:	32 2e       	mov	r3, r18
 58a:	19 c0       	rjmp	.+50     	; 0x5be <vfprintf+0xe6>
 58c:	36 fe       	sbrs	r3, 6
 58e:	06 c0       	rjmp	.+12     	; 0x59c <vfprintf+0xc4>
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	98 9e       	mul	r9, r24
 594:	20 0d       	add	r18, r0
 596:	11 24       	eor	r1, r1
 598:	92 2e       	mov	r9, r18
 59a:	11 c0       	rjmp	.+34     	; 0x5be <vfprintf+0xe6>
 59c:	ea e0       	ldi	r30, 0x0A	; 10
 59e:	2e 9e       	mul	r2, r30
 5a0:	20 0d       	add	r18, r0
 5a2:	11 24       	eor	r1, r1
 5a4:	22 2e       	mov	r2, r18
 5a6:	f3 2d       	mov	r31, r3
 5a8:	f0 62       	ori	r31, 0x20	; 32
 5aa:	3f 2e       	mov	r3, r31
 5ac:	08 c0       	rjmp	.+16     	; 0x5be <vfprintf+0xe6>
 5ae:	8c 36       	cpi	r24, 0x6C	; 108
 5b0:	21 f4       	brne	.+8      	; 0x5ba <vfprintf+0xe2>
 5b2:	83 2d       	mov	r24, r3
 5b4:	80 68       	ori	r24, 0x80	; 128
 5b6:	38 2e       	mov	r3, r24
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <vfprintf+0xe6>
 5ba:	88 36       	cpi	r24, 0x68	; 104
 5bc:	41 f4       	brne	.+16     	; 0x5ce <vfprintf+0xf6>
 5be:	f7 01       	movw	r30, r14
 5c0:	93 fd       	sbrc	r25, 3
 5c2:	85 91       	lpm	r24, Z+
 5c4:	93 ff       	sbrs	r25, 3
 5c6:	81 91       	ld	r24, Z+
 5c8:	7f 01       	movw	r14, r30
 5ca:	81 11       	cpse	r24, r1
 5cc:	b3 cf       	rjmp	.-154    	; 0x534 <vfprintf+0x5c>
 5ce:	98 2f       	mov	r25, r24
 5d0:	9f 7d       	andi	r25, 0xDF	; 223
 5d2:	95 54       	subi	r25, 0x45	; 69
 5d4:	93 30       	cpi	r25, 0x03	; 3
 5d6:	28 f4       	brcc	.+10     	; 0x5e2 <vfprintf+0x10a>
 5d8:	0c 5f       	subi	r16, 0xFC	; 252
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	9f e3       	ldi	r25, 0x3F	; 63
 5de:	99 83       	std	Y+1, r25	; 0x01
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <vfprintf+0x124>
 5e2:	83 36       	cpi	r24, 0x63	; 99
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <vfprintf+0x11a>
 5e6:	83 37       	cpi	r24, 0x73	; 115
 5e8:	71 f0       	breq	.+28     	; 0x606 <vfprintf+0x12e>
 5ea:	83 35       	cpi	r24, 0x53	; 83
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <vfprintf+0x118>
 5ee:	59 c0       	rjmp	.+178    	; 0x6a2 <vfprintf+0x1ca>
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <vfprintf+0x15c>
 5f2:	f8 01       	movw	r30, r16
 5f4:	80 81       	ld	r24, Z
 5f6:	89 83       	std	Y+1, r24	; 0x01
 5f8:	0e 5f       	subi	r16, 0xFE	; 254
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	88 24       	eor	r8, r8
 5fe:	83 94       	inc	r8
 600:	91 2c       	mov	r9, r1
 602:	53 01       	movw	r10, r6
 604:	13 c0       	rjmp	.+38     	; 0x62c <vfprintf+0x154>
 606:	28 01       	movw	r4, r16
 608:	f2 e0       	ldi	r31, 0x02	; 2
 60a:	4f 0e       	add	r4, r31
 60c:	51 1c       	adc	r5, r1
 60e:	f8 01       	movw	r30, r16
 610:	a0 80       	ld	r10, Z
 612:	b1 80       	ldd	r11, Z+1	; 0x01
 614:	36 fe       	sbrs	r3, 6
 616:	03 c0       	rjmp	.+6      	; 0x61e <vfprintf+0x146>
 618:	69 2d       	mov	r22, r9
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <vfprintf+0x14a>
 61e:	6f ef       	ldi	r22, 0xFF	; 255
 620:	7f ef       	ldi	r23, 0xFF	; 255
 622:	c5 01       	movw	r24, r10
 624:	0e 94 58 04 	call	0x8b0	; 0x8b0 <strnlen>
 628:	4c 01       	movw	r8, r24
 62a:	82 01       	movw	r16, r4
 62c:	f3 2d       	mov	r31, r3
 62e:	ff 77       	andi	r31, 0x7F	; 127
 630:	3f 2e       	mov	r3, r31
 632:	16 c0       	rjmp	.+44     	; 0x660 <vfprintf+0x188>
 634:	28 01       	movw	r4, r16
 636:	22 e0       	ldi	r18, 0x02	; 2
 638:	42 0e       	add	r4, r18
 63a:	51 1c       	adc	r5, r1
 63c:	f8 01       	movw	r30, r16
 63e:	a0 80       	ld	r10, Z
 640:	b1 80       	ldd	r11, Z+1	; 0x01
 642:	36 fe       	sbrs	r3, 6
 644:	03 c0       	rjmp	.+6      	; 0x64c <vfprintf+0x174>
 646:	69 2d       	mov	r22, r9
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <vfprintf+0x178>
 64c:	6f ef       	ldi	r22, 0xFF	; 255
 64e:	7f ef       	ldi	r23, 0xFF	; 255
 650:	c5 01       	movw	r24, r10
 652:	0e 94 4d 04 	call	0x89a	; 0x89a <strnlen_P>
 656:	4c 01       	movw	r8, r24
 658:	f3 2d       	mov	r31, r3
 65a:	f0 68       	ori	r31, 0x80	; 128
 65c:	3f 2e       	mov	r3, r31
 65e:	82 01       	movw	r16, r4
 660:	33 fc       	sbrc	r3, 3
 662:	1b c0       	rjmp	.+54     	; 0x69a <vfprintf+0x1c2>
 664:	82 2d       	mov	r24, r2
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	88 16       	cp	r8, r24
 66a:	99 06       	cpc	r9, r25
 66c:	b0 f4       	brcc	.+44     	; 0x69a <vfprintf+0x1c2>
 66e:	b6 01       	movw	r22, r12
 670:	80 e2       	ldi	r24, 0x20	; 32
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 678:	2a 94       	dec	r2
 67a:	f4 cf       	rjmp	.-24     	; 0x664 <vfprintf+0x18c>
 67c:	f5 01       	movw	r30, r10
 67e:	37 fc       	sbrc	r3, 7
 680:	85 91       	lpm	r24, Z+
 682:	37 fe       	sbrs	r3, 7
 684:	81 91       	ld	r24, Z+
 686:	5f 01       	movw	r10, r30
 688:	b6 01       	movw	r22, r12
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 690:	21 10       	cpse	r2, r1
 692:	2a 94       	dec	r2
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	82 1a       	sub	r8, r18
 698:	91 08       	sbc	r9, r1
 69a:	81 14       	cp	r8, r1
 69c:	91 04       	cpc	r9, r1
 69e:	71 f7       	brne	.-36     	; 0x67c <vfprintf+0x1a4>
 6a0:	e8 c0       	rjmp	.+464    	; 0x872 <__EEPROM_REGION_LENGTH__+0x72>
 6a2:	84 36       	cpi	r24, 0x64	; 100
 6a4:	11 f0       	breq	.+4      	; 0x6aa <vfprintf+0x1d2>
 6a6:	89 36       	cpi	r24, 0x69	; 105
 6a8:	41 f5       	brne	.+80     	; 0x6fa <vfprintf+0x222>
 6aa:	f8 01       	movw	r30, r16
 6ac:	37 fe       	sbrs	r3, 7
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <vfprintf+0x1e6>
 6b0:	60 81       	ld	r22, Z
 6b2:	71 81       	ldd	r23, Z+1	; 0x01
 6b4:	82 81       	ldd	r24, Z+2	; 0x02
 6b6:	93 81       	ldd	r25, Z+3	; 0x03
 6b8:	0c 5f       	subi	r16, 0xFC	; 252
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <vfprintf+0x1f6>
 6be:	60 81       	ld	r22, Z
 6c0:	71 81       	ldd	r23, Z+1	; 0x01
 6c2:	07 2e       	mov	r0, r23
 6c4:	00 0c       	add	r0, r0
 6c6:	88 0b       	sbc	r24, r24
 6c8:	99 0b       	sbc	r25, r25
 6ca:	0e 5f       	subi	r16, 0xFE	; 254
 6cc:	1f 4f       	sbci	r17, 0xFF	; 255
 6ce:	f3 2d       	mov	r31, r3
 6d0:	ff 76       	andi	r31, 0x6F	; 111
 6d2:	3f 2e       	mov	r3, r31
 6d4:	97 ff       	sbrs	r25, 7
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <vfprintf+0x212>
 6d8:	90 95       	com	r25
 6da:	80 95       	com	r24
 6dc:	70 95       	com	r23
 6de:	61 95       	neg	r22
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	8f 4f       	sbci	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	f0 68       	ori	r31, 0x80	; 128
 6e8:	3f 2e       	mov	r3, r31
 6ea:	2a e0       	ldi	r18, 0x0A	; 10
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	a3 01       	movw	r20, r6
 6f0:	0e 94 9f 04 	call	0x93e	; 0x93e <__ultoa_invert>
 6f4:	88 2e       	mov	r8, r24
 6f6:	86 18       	sub	r8, r6
 6f8:	45 c0       	rjmp	.+138    	; 0x784 <vfprintf+0x2ac>
 6fa:	85 37       	cpi	r24, 0x75	; 117
 6fc:	31 f4       	brne	.+12     	; 0x70a <vfprintf+0x232>
 6fe:	23 2d       	mov	r18, r3
 700:	2f 7e       	andi	r18, 0xEF	; 239
 702:	b2 2e       	mov	r11, r18
 704:	2a e0       	ldi	r18, 0x0A	; 10
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	25 c0       	rjmp	.+74     	; 0x754 <vfprintf+0x27c>
 70a:	93 2d       	mov	r25, r3
 70c:	99 7f       	andi	r25, 0xF9	; 249
 70e:	b9 2e       	mov	r11, r25
 710:	8f 36       	cpi	r24, 0x6F	; 111
 712:	c1 f0       	breq	.+48     	; 0x744 <vfprintf+0x26c>
 714:	18 f4       	brcc	.+6      	; 0x71c <vfprintf+0x244>
 716:	88 35       	cpi	r24, 0x58	; 88
 718:	79 f0       	breq	.+30     	; 0x738 <vfprintf+0x260>
 71a:	b5 c0       	rjmp	.+362    	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 71c:	80 37       	cpi	r24, 0x70	; 112
 71e:	19 f0       	breq	.+6      	; 0x726 <vfprintf+0x24e>
 720:	88 37       	cpi	r24, 0x78	; 120
 722:	21 f0       	breq	.+8      	; 0x72c <vfprintf+0x254>
 724:	b0 c0       	rjmp	.+352    	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 726:	e9 2f       	mov	r30, r25
 728:	e0 61       	ori	r30, 0x10	; 16
 72a:	be 2e       	mov	r11, r30
 72c:	b4 fe       	sbrs	r11, 4
 72e:	0d c0       	rjmp	.+26     	; 0x74a <vfprintf+0x272>
 730:	fb 2d       	mov	r31, r11
 732:	f4 60       	ori	r31, 0x04	; 4
 734:	bf 2e       	mov	r11, r31
 736:	09 c0       	rjmp	.+18     	; 0x74a <vfprintf+0x272>
 738:	34 fe       	sbrs	r3, 4
 73a:	0a c0       	rjmp	.+20     	; 0x750 <vfprintf+0x278>
 73c:	29 2f       	mov	r18, r25
 73e:	26 60       	ori	r18, 0x06	; 6
 740:	b2 2e       	mov	r11, r18
 742:	06 c0       	rjmp	.+12     	; 0x750 <vfprintf+0x278>
 744:	28 e0       	ldi	r18, 0x08	; 8
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	05 c0       	rjmp	.+10     	; 0x754 <vfprintf+0x27c>
 74a:	20 e1       	ldi	r18, 0x10	; 16
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x27c>
 750:	20 e1       	ldi	r18, 0x10	; 16
 752:	32 e0       	ldi	r19, 0x02	; 2
 754:	f8 01       	movw	r30, r16
 756:	b7 fe       	sbrs	r11, 7
 758:	07 c0       	rjmp	.+14     	; 0x768 <vfprintf+0x290>
 75a:	60 81       	ld	r22, Z
 75c:	71 81       	ldd	r23, Z+1	; 0x01
 75e:	82 81       	ldd	r24, Z+2	; 0x02
 760:	93 81       	ldd	r25, Z+3	; 0x03
 762:	0c 5f       	subi	r16, 0xFC	; 252
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	06 c0       	rjmp	.+12     	; 0x774 <vfprintf+0x29c>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 5f       	subi	r16, 0xFE	; 254
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	a3 01       	movw	r20, r6
 776:	0e 94 9f 04 	call	0x93e	; 0x93e <__ultoa_invert>
 77a:	88 2e       	mov	r8, r24
 77c:	86 18       	sub	r8, r6
 77e:	fb 2d       	mov	r31, r11
 780:	ff 77       	andi	r31, 0x7F	; 127
 782:	3f 2e       	mov	r3, r31
 784:	36 fe       	sbrs	r3, 6
 786:	0d c0       	rjmp	.+26     	; 0x7a2 <vfprintf+0x2ca>
 788:	23 2d       	mov	r18, r3
 78a:	2e 7f       	andi	r18, 0xFE	; 254
 78c:	a2 2e       	mov	r10, r18
 78e:	89 14       	cp	r8, r9
 790:	58 f4       	brcc	.+22     	; 0x7a8 <vfprintf+0x2d0>
 792:	34 fe       	sbrs	r3, 4
 794:	0b c0       	rjmp	.+22     	; 0x7ac <vfprintf+0x2d4>
 796:	32 fc       	sbrc	r3, 2
 798:	09 c0       	rjmp	.+18     	; 0x7ac <vfprintf+0x2d4>
 79a:	83 2d       	mov	r24, r3
 79c:	8e 7e       	andi	r24, 0xEE	; 238
 79e:	a8 2e       	mov	r10, r24
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <vfprintf+0x2d4>
 7a2:	b8 2c       	mov	r11, r8
 7a4:	a3 2c       	mov	r10, r3
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <vfprintf+0x2d6>
 7a8:	b8 2c       	mov	r11, r8
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <vfprintf+0x2d6>
 7ac:	b9 2c       	mov	r11, r9
 7ae:	a4 fe       	sbrs	r10, 4
 7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <vfprintf+0x2f8>
 7b2:	fe 01       	movw	r30, r28
 7b4:	e8 0d       	add	r30, r8
 7b6:	f1 1d       	adc	r31, r1
 7b8:	80 81       	ld	r24, Z
 7ba:	80 33       	cpi	r24, 0x30	; 48
 7bc:	21 f4       	brne	.+8      	; 0x7c6 <vfprintf+0x2ee>
 7be:	9a 2d       	mov	r25, r10
 7c0:	99 7e       	andi	r25, 0xE9	; 233
 7c2:	a9 2e       	mov	r10, r25
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x300>
 7c6:	a2 fe       	sbrs	r10, 2
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x2fe>
 7ca:	b3 94       	inc	r11
 7cc:	b3 94       	inc	r11
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <vfprintf+0x300>
 7d0:	8a 2d       	mov	r24, r10
 7d2:	86 78       	andi	r24, 0x86	; 134
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <vfprintf+0x300>
 7d6:	b3 94       	inc	r11
 7d8:	a3 fc       	sbrc	r10, 3
 7da:	11 c0       	rjmp	.+34     	; 0x7fe <vfprintf+0x326>
 7dc:	a0 fe       	sbrs	r10, 0
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x314>
 7e0:	b2 14       	cp	r11, r2
 7e2:	88 f4       	brcc	.+34     	; 0x806 <__EEPROM_REGION_LENGTH__+0x6>
 7e4:	28 0c       	add	r2, r8
 7e6:	92 2c       	mov	r9, r2
 7e8:	9b 18       	sub	r9, r11
 7ea:	0e c0       	rjmp	.+28     	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 7ec:	b2 14       	cp	r11, r2
 7ee:	60 f4       	brcc	.+24     	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 7f0:	b6 01       	movw	r22, r12
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 7fa:	b3 94       	inc	r11
 7fc:	f7 cf       	rjmp	.-18     	; 0x7ec <vfprintf+0x314>
 7fe:	b2 14       	cp	r11, r2
 800:	18 f4       	brcc	.+6      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 802:	2b 18       	sub	r2, r11
 804:	02 c0       	rjmp	.+4      	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 806:	98 2c       	mov	r9, r8
 808:	21 2c       	mov	r2, r1
 80a:	a4 fe       	sbrs	r10, 4
 80c:	10 c0       	rjmp	.+32     	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 80e:	b6 01       	movw	r22, r12
 810:	80 e3       	ldi	r24, 0x30	; 48
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 818:	a2 fe       	sbrs	r10, 2
 81a:	17 c0       	rjmp	.+46     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 81c:	a1 fc       	sbrc	r10, 1
 81e:	03 c0       	rjmp	.+6      	; 0x826 <__EEPROM_REGION_LENGTH__+0x26>
 820:	88 e7       	ldi	r24, 0x78	; 120
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
 826:	88 e5       	ldi	r24, 0x58	; 88
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	b6 01       	movw	r22, r12
 82c:	0c c0       	rjmp	.+24     	; 0x846 <__EEPROM_REGION_LENGTH__+0x46>
 82e:	8a 2d       	mov	r24, r10
 830:	86 78       	andi	r24, 0x86	; 134
 832:	59 f0       	breq	.+22     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 834:	a1 fe       	sbrs	r10, 1
 836:	02 c0       	rjmp	.+4      	; 0x83c <__EEPROM_REGION_LENGTH__+0x3c>
 838:	8b e2       	ldi	r24, 0x2B	; 43
 83a:	01 c0       	rjmp	.+2      	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	a7 fc       	sbrc	r10, 7
 840:	8d e2       	ldi	r24, 0x2D	; 45
 842:	b6 01       	movw	r22, r12
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 84a:	89 14       	cp	r8, r9
 84c:	38 f4       	brcc	.+14     	; 0x85c <__EEPROM_REGION_LENGTH__+0x5c>
 84e:	b6 01       	movw	r22, r12
 850:	80 e3       	ldi	r24, 0x30	; 48
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 858:	9a 94       	dec	r9
 85a:	f7 cf       	rjmp	.-18     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 85c:	8a 94       	dec	r8
 85e:	f3 01       	movw	r30, r6
 860:	e8 0d       	add	r30, r8
 862:	f1 1d       	adc	r31, r1
 864:	80 81       	ld	r24, Z
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 86e:	81 10       	cpse	r8, r1
 870:	f5 cf       	rjmp	.-22     	; 0x85c <__EEPROM_REGION_LENGTH__+0x5c>
 872:	22 20       	and	r2, r2
 874:	09 f4       	brne	.+2      	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
 876:	42 ce       	rjmp	.-892    	; 0x4fc <vfprintf+0x24>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <fputc>
 882:	2a 94       	dec	r2
 884:	f6 cf       	rjmp	.-20     	; 0x872 <__EEPROM_REGION_LENGTH__+0x72>
 886:	f6 01       	movw	r30, r12
 888:	86 81       	ldd	r24, Z+6	; 0x06
 88a:	97 81       	ldd	r25, Z+7	; 0x07
 88c:	02 c0       	rjmp	.+4      	; 0x892 <__EEPROM_REGION_LENGTH__+0x92>
 88e:	8f ef       	ldi	r24, 0xFF	; 255
 890:	9f ef       	ldi	r25, 0xFF	; 255
 892:	2b 96       	adiw	r28, 0x0b	; 11
 894:	e2 e1       	ldi	r30, 0x12	; 18
 896:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__epilogue_restores__>

0000089a <strnlen_P>:
 89a:	fc 01       	movw	r30, r24
 89c:	05 90       	lpm	r0, Z+
 89e:	61 50       	subi	r22, 0x01	; 1
 8a0:	70 40       	sbci	r23, 0x00	; 0
 8a2:	01 10       	cpse	r0, r1
 8a4:	d8 f7       	brcc	.-10     	; 0x89c <strnlen_P+0x2>
 8a6:	80 95       	com	r24
 8a8:	90 95       	com	r25
 8aa:	8e 0f       	add	r24, r30
 8ac:	9f 1f       	adc	r25, r31
 8ae:	08 95       	ret

000008b0 <strnlen>:
 8b0:	fc 01       	movw	r30, r24
 8b2:	61 50       	subi	r22, 0x01	; 1
 8b4:	70 40       	sbci	r23, 0x00	; 0
 8b6:	01 90       	ld	r0, Z+
 8b8:	01 10       	cpse	r0, r1
 8ba:	d8 f7       	brcc	.-10     	; 0x8b2 <strnlen+0x2>
 8bc:	80 95       	com	r24
 8be:	90 95       	com	r25
 8c0:	8e 0f       	add	r24, r30
 8c2:	9f 1f       	adc	r25, r31
 8c4:	08 95       	ret

000008c6 <fputc>:
 8c6:	0f 93       	push	r16
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	fb 01       	movw	r30, r22
 8d0:	23 81       	ldd	r18, Z+3	; 0x03
 8d2:	21 fd       	sbrc	r18, 1
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <fputc+0x16>
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	2c c0       	rjmp	.+88     	; 0x934 <fputc+0x6e>
 8dc:	22 ff       	sbrs	r18, 2
 8de:	16 c0       	rjmp	.+44     	; 0x90c <fputc+0x46>
 8e0:	46 81       	ldd	r20, Z+6	; 0x06
 8e2:	57 81       	ldd	r21, Z+7	; 0x07
 8e4:	24 81       	ldd	r18, Z+4	; 0x04
 8e6:	35 81       	ldd	r19, Z+5	; 0x05
 8e8:	42 17       	cp	r20, r18
 8ea:	53 07       	cpc	r21, r19
 8ec:	44 f4       	brge	.+16     	; 0x8fe <fputc+0x38>
 8ee:	a0 81       	ld	r26, Z
 8f0:	b1 81       	ldd	r27, Z+1	; 0x01
 8f2:	9d 01       	movw	r18, r26
 8f4:	2f 5f       	subi	r18, 0xFF	; 255
 8f6:	3f 4f       	sbci	r19, 0xFF	; 255
 8f8:	31 83       	std	Z+1, r19	; 0x01
 8fa:	20 83       	st	Z, r18
 8fc:	8c 93       	st	X, r24
 8fe:	26 81       	ldd	r18, Z+6	; 0x06
 900:	37 81       	ldd	r19, Z+7	; 0x07
 902:	2f 5f       	subi	r18, 0xFF	; 255
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	37 83       	std	Z+7, r19	; 0x07
 908:	26 83       	std	Z+6, r18	; 0x06
 90a:	14 c0       	rjmp	.+40     	; 0x934 <fputc+0x6e>
 90c:	8b 01       	movw	r16, r22
 90e:	ec 01       	movw	r28, r24
 910:	fb 01       	movw	r30, r22
 912:	00 84       	ldd	r0, Z+8	; 0x08
 914:	f1 85       	ldd	r31, Z+9	; 0x09
 916:	e0 2d       	mov	r30, r0
 918:	09 95       	icall
 91a:	89 2b       	or	r24, r25
 91c:	e1 f6       	brne	.-72     	; 0x8d6 <fputc+0x10>
 91e:	d8 01       	movw	r26, r16
 920:	16 96       	adiw	r26, 0x06	; 6
 922:	8d 91       	ld	r24, X+
 924:	9c 91       	ld	r25, X
 926:	17 97       	sbiw	r26, 0x07	; 7
 928:	01 96       	adiw	r24, 0x01	; 1
 92a:	17 96       	adiw	r26, 0x07	; 7
 92c:	9c 93       	st	X, r25
 92e:	8e 93       	st	-X, r24
 930:	16 97       	sbiw	r26, 0x06	; 6
 932:	ce 01       	movw	r24, r28
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	08 95       	ret

0000093e <__ultoa_invert>:
 93e:	fa 01       	movw	r30, r20
 940:	aa 27       	eor	r26, r26
 942:	28 30       	cpi	r18, 0x08	; 8
 944:	51 f1       	breq	.+84     	; 0x99a <__ultoa_invert+0x5c>
 946:	20 31       	cpi	r18, 0x10	; 16
 948:	81 f1       	breq	.+96     	; 0x9aa <__ultoa_invert+0x6c>
 94a:	e8 94       	clt
 94c:	6f 93       	push	r22
 94e:	6e 7f       	andi	r22, 0xFE	; 254
 950:	6e 5f       	subi	r22, 0xFE	; 254
 952:	7f 4f       	sbci	r23, 0xFF	; 255
 954:	8f 4f       	sbci	r24, 0xFF	; 255
 956:	9f 4f       	sbci	r25, 0xFF	; 255
 958:	af 4f       	sbci	r26, 0xFF	; 255
 95a:	b1 e0       	ldi	r27, 0x01	; 1
 95c:	3e d0       	rcall	.+124    	; 0x9da <__ultoa_invert+0x9c>
 95e:	b4 e0       	ldi	r27, 0x04	; 4
 960:	3c d0       	rcall	.+120    	; 0x9da <__ultoa_invert+0x9c>
 962:	67 0f       	add	r22, r23
 964:	78 1f       	adc	r23, r24
 966:	89 1f       	adc	r24, r25
 968:	9a 1f       	adc	r25, r26
 96a:	a1 1d       	adc	r26, r1
 96c:	68 0f       	add	r22, r24
 96e:	79 1f       	adc	r23, r25
 970:	8a 1f       	adc	r24, r26
 972:	91 1d       	adc	r25, r1
 974:	a1 1d       	adc	r26, r1
 976:	6a 0f       	add	r22, r26
 978:	71 1d       	adc	r23, r1
 97a:	81 1d       	adc	r24, r1
 97c:	91 1d       	adc	r25, r1
 97e:	a1 1d       	adc	r26, r1
 980:	20 d0       	rcall	.+64     	; 0x9c2 <__ultoa_invert+0x84>
 982:	09 f4       	brne	.+2      	; 0x986 <__ultoa_invert+0x48>
 984:	68 94       	set
 986:	3f 91       	pop	r19
 988:	2a e0       	ldi	r18, 0x0A	; 10
 98a:	26 9f       	mul	r18, r22
 98c:	11 24       	eor	r1, r1
 98e:	30 19       	sub	r19, r0
 990:	30 5d       	subi	r19, 0xD0	; 208
 992:	31 93       	st	Z+, r19
 994:	de f6       	brtc	.-74     	; 0x94c <__ultoa_invert+0xe>
 996:	cf 01       	movw	r24, r30
 998:	08 95       	ret
 99a:	46 2f       	mov	r20, r22
 99c:	47 70       	andi	r20, 0x07	; 7
 99e:	40 5d       	subi	r20, 0xD0	; 208
 9a0:	41 93       	st	Z+, r20
 9a2:	b3 e0       	ldi	r27, 0x03	; 3
 9a4:	0f d0       	rcall	.+30     	; 0x9c4 <__ultoa_invert+0x86>
 9a6:	c9 f7       	brne	.-14     	; 0x99a <__ultoa_invert+0x5c>
 9a8:	f6 cf       	rjmp	.-20     	; 0x996 <__ultoa_invert+0x58>
 9aa:	46 2f       	mov	r20, r22
 9ac:	4f 70       	andi	r20, 0x0F	; 15
 9ae:	40 5d       	subi	r20, 0xD0	; 208
 9b0:	4a 33       	cpi	r20, 0x3A	; 58
 9b2:	18 f0       	brcs	.+6      	; 0x9ba <__ultoa_invert+0x7c>
 9b4:	49 5d       	subi	r20, 0xD9	; 217
 9b6:	31 fd       	sbrc	r19, 1
 9b8:	40 52       	subi	r20, 0x20	; 32
 9ba:	41 93       	st	Z+, r20
 9bc:	02 d0       	rcall	.+4      	; 0x9c2 <__ultoa_invert+0x84>
 9be:	a9 f7       	brne	.-22     	; 0x9aa <__ultoa_invert+0x6c>
 9c0:	ea cf       	rjmp	.-44     	; 0x996 <__ultoa_invert+0x58>
 9c2:	b4 e0       	ldi	r27, 0x04	; 4
 9c4:	a6 95       	lsr	r26
 9c6:	97 95       	ror	r25
 9c8:	87 95       	ror	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	ba 95       	dec	r27
 9d0:	c9 f7       	brne	.-14     	; 0x9c4 <__ultoa_invert+0x86>
 9d2:	00 97       	sbiw	r24, 0x00	; 0
 9d4:	61 05       	cpc	r22, r1
 9d6:	71 05       	cpc	r23, r1
 9d8:	08 95       	ret
 9da:	9b 01       	movw	r18, r22
 9dc:	ac 01       	movw	r20, r24
 9de:	0a 2e       	mov	r0, r26
 9e0:	06 94       	lsr	r0
 9e2:	57 95       	ror	r21
 9e4:	47 95       	ror	r20
 9e6:	37 95       	ror	r19
 9e8:	27 95       	ror	r18
 9ea:	ba 95       	dec	r27
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__ultoa_invert+0xa2>
 9ee:	62 0f       	add	r22, r18
 9f0:	73 1f       	adc	r23, r19
 9f2:	84 1f       	adc	r24, r20
 9f4:	95 1f       	adc	r25, r21
 9f6:	a0 1d       	adc	r26, r0
 9f8:	08 95       	ret

000009fa <__prologue_saves__>:
 9fa:	2f 92       	push	r2
 9fc:	3f 92       	push	r3
 9fe:	4f 92       	push	r4
 a00:	5f 92       	push	r5
 a02:	6f 92       	push	r6
 a04:	7f 92       	push	r7
 a06:	8f 92       	push	r8
 a08:	9f 92       	push	r9
 a0a:	af 92       	push	r10
 a0c:	bf 92       	push	r11
 a0e:	cf 92       	push	r12
 a10:	df 92       	push	r13
 a12:	ef 92       	push	r14
 a14:	ff 92       	push	r15
 a16:	0f 93       	push	r16
 a18:	1f 93       	push	r17
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	cd b7       	in	r28, 0x3d	; 61
 a20:	de b7       	in	r29, 0x3e	; 62
 a22:	ca 1b       	sub	r28, r26
 a24:	db 0b       	sbc	r29, r27
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	f8 94       	cli
 a2a:	de bf       	out	0x3e, r29	; 62
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	cd bf       	out	0x3d, r28	; 61
 a30:	09 94       	ijmp

00000a32 <__epilogue_restores__>:
 a32:	2a 88       	ldd	r2, Y+18	; 0x12
 a34:	39 88       	ldd	r3, Y+17	; 0x11
 a36:	48 88       	ldd	r4, Y+16	; 0x10
 a38:	5f 84       	ldd	r5, Y+15	; 0x0f
 a3a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a3c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a3e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a40:	9b 84       	ldd	r9, Y+11	; 0x0b
 a42:	aa 84       	ldd	r10, Y+10	; 0x0a
 a44:	b9 84       	ldd	r11, Y+9	; 0x09
 a46:	c8 84       	ldd	r12, Y+8	; 0x08
 a48:	df 80       	ldd	r13, Y+7	; 0x07
 a4a:	ee 80       	ldd	r14, Y+6	; 0x06
 a4c:	fd 80       	ldd	r15, Y+5	; 0x05
 a4e:	0c 81       	ldd	r16, Y+4	; 0x04
 a50:	1b 81       	ldd	r17, Y+3	; 0x03
 a52:	aa 81       	ldd	r26, Y+2	; 0x02
 a54:	b9 81       	ldd	r27, Y+1	; 0x01
 a56:	ce 0f       	add	r28, r30
 a58:	d1 1d       	adc	r29, r1
 a5a:	0f b6       	in	r0, 0x3f	; 63
 a5c:	f8 94       	cli
 a5e:	de bf       	out	0x3e, r29	; 62
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	cd bf       	out	0x3d, r28	; 61
 a64:	ed 01       	movw	r28, r26
 a66:	08 95       	ret

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
