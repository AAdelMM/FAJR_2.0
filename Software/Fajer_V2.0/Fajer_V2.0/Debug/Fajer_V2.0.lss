
Fajer_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00000700  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800272  00800272  00000906  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f1  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce6  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd8  00000000  00000000  00003007  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063c  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000617  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004f0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e0       	ldi	r30, 0x00	; 0
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 37       	cpi	r26, 0x72	; 114
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a2 e7       	ldi	r26, 0x72	; 114
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 38       	cpi	r26, 0x89	; 137
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <main>
  b2:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <checking>:
 *  Author: Ahmed Adel
 */ 
 
#include "APP.h"

void checking(void){
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	//initializing
	lcd_init();
  c4:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_init>
	//reset lcd and calls signals
	
	//welcome screen with testing calls signals and 7 segment
	lcd_command(0x01); //clear display
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_command(0x80); // Set cursor at the beginning of the first line
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_string("Empironics"); // Display a string on the LCD
  d4:	8c e1       	ldi	r24, 0x1C	; 28
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
	PORTC |=(1 << 1);          //clock for lcd
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << 1);
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	88 b9       	out	0x08, r24	; 8
	for(uint8_t i=0; i<15; i++)
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	1c c0       	rjmp	.+56     	; 0x124 <checking+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <checking+0x38>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <checking+0x42>
  fc:	00 00       	nop
	{
		_delay_ms(50);
		inc_shiftOut(callsNumber[i]);
  fe:	c1 2f       	mov	r28, r17
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	fe 01       	movw	r30, r28
 104:	ec 5e       	subi	r30, 0xEC	; 236
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	7f 01       	movw	r14, r30
 10a:	80 81       	ld	r24, Z
 10c:	0e 94 39 03 	call	0x672	; 0x672 <inc_shiftOut>
		exc_shiftOut(callsNumber[i]);
 110:	f7 01       	movw	r30, r14
 112:	80 81       	ld	r24, Z
 114:	0e 94 59 03 	call	0x6b2	; 0x6b2 <exc_shiftOut>
		dis_shiftOut(sevenSegment[i]);
 118:	c0 50       	subi	r28, 0x00	; 0
 11a:	df 4f       	sbci	r29, 0xFF	; 255
 11c:	88 81       	ld	r24, Y
 11e:	0e 94 19 03 	call	0x632	; 0x632 <dis_shiftOut>
	lcd_command(0x01); //clear display
	lcd_command(0x80); // Set cursor at the beginning of the first line
	lcd_string("Empironics"); // Display a string on the LCD
	PORTC |=(1 << 1);          //clock for lcd
	PORTC &= ~(1 << 1);
	for(uint8_t i=0; i<15; i++)
 122:	1f 5f       	subi	r17, 0xFF	; 255
 124:	1f 30       	cpi	r17, 0x0F	; 15
 126:	10 f3       	brcs	.-60     	; 0xec <checking+0x32>
		_delay_ms(50);
		inc_shiftOut(callsNumber[i]);
		exc_shiftOut(callsNumber[i]);
		dis_shiftOut(sevenSegment[i]);
	}
}  
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	08 95       	ret

00000134 <appStart>:

	
	
	//checking programming mode 
	//if programming switch is active then go to programming mode 
	if(!(PINA & (1 << Enter)))
 134:	00 99       	sbic	0x00, 0	; 0
 136:	0b c0       	rjmp	.+22     	; 0x14e <appStart+0x1a>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	84 e3       	ldi	r24, 0x34	; 52
 13c:	9c e0       	ldi	r25, 0x0C	; 12
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <appStart+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <appStart+0x14>
 148:	00 00       	nop
	{
		_delay_ms(500);
		program();
 14a:	0e 94 c0 00 	call	0x180	; 0x180 <program>
 14e:	08 95       	ret

00000150 <doorMode>:
 }
 void setPassword(void){
	 //display name of function in line 1 and parameter value in line 2
	 //this function set password to board to access the programming
 }
 void correction(void){
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
 156:	87 e2       	ldi	r24, 0x27	; 39
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
 15e:	01 99       	sbic	0x00, 1	; 0
 160:	fe cf       	rjmp	.-4      	; 0x15e <doorMode+0xe>
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
 168:	81 e3       	ldi	r24, 0x31	; 49
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
 170:	00 99       	sbic	0x00, 0	; 0
 172:	f5 cf       	rjmp	.-22     	; 0x15e <doorMode+0xe>
 174:	08 95       	ret

00000176 <parameterSelect>:
	 //display name of function in line 1 and parameter value in line 2
	 //this function set auto correction after power on
 }
//function to select which parameter to change value
void parameterSelect(uint8_t pSelect){
	switch(pSelect)
 176:	81 11       	cpse	r24, r1
 178:	02 c0       	rjmp	.+4      	; 0x17e <parameterSelect+0x8>
	{
		case 0:
		doorMode();
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <doorMode>
 17e:	08 95       	ret

00000180 <program>:
		correction();
		break;
	}
}
 
 void program(void){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	c0 54       	subi	r28, 0x40	; 64
 18a:	d1 40       	sbci	r29, 0x01	; 1
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61

	char Program_list[20][16] = { "Door Mode", //0
 196:	de 01       	movw	r26, r28
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	80 e4       	ldi	r24, 0x40	; 64
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	fd 01       	movw	r30, r26
 1a0:	9c 01       	movw	r18, r24
 1a2:	11 92       	st	Z+, r1
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <program+0x22>
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	e7 e2       	ldi	r30, 0x27	; 39
 1ae:	f2 e0       	ldi	r31, 0x02	; 2
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <program+0x30>
 1b8:	96 e0       	ldi	r25, 0x06	; 6
 1ba:	fe 01       	movw	r30, r28
 1bc:	3b 96       	adiw	r30, 0x0b	; 11
 1be:	df 01       	movw	r26, r30
 1c0:	29 2f       	mov	r18, r25
 1c2:	1d 92       	st	X+, r1
 1c4:	2a 95       	dec	r18
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <program+0x42>
 1c8:	8d e0       	ldi	r24, 0x0D	; 13
 1ca:	ec e1       	ldi	r30, 0x1C	; 28
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	de 01       	movw	r26, r28
 1d0:	51 96       	adiw	r26, 0x11	; 17
 1d2:	01 90       	ld	r0, Z+
 1d4:	0d 92       	st	X+, r0
 1d6:	8a 95       	dec	r24
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <program+0x52>
 1da:	23 e0       	ldi	r18, 0x03	; 3
 1dc:	fe 01       	movw	r30, r28
 1de:	7e 96       	adiw	r30, 0x1e	; 30
 1e0:	df 01       	movw	r26, r30
 1e2:	32 2f       	mov	r19, r18
 1e4:	1d 92       	st	X+, r1
 1e6:	3a 95       	dec	r19
 1e8:	e9 f7       	brne	.-6      	; 0x1e4 <program+0x64>
 1ea:	8b e0       	ldi	r24, 0x0B	; 11
 1ec:	ec e2       	ldi	r30, 0x2C	; 44
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	de 01       	movw	r26, r28
 1f2:	91 96       	adiw	r26, 0x21	; 33
 1f4:	01 90       	ld	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	8a 95       	dec	r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <program+0x74>
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	fe 01       	movw	r30, r28
 200:	bc 96       	adiw	r30, 0x2c	; 44
 202:	df 01       	movw	r26, r30
 204:	38 2f       	mov	r19, r24
 206:	1d 92       	st	X+, r1
 208:	3a 95       	dec	r19
 20a:	e9 f7       	brne	.-6      	; 0x206 <program+0x86>
 20c:	3c e0       	ldi	r19, 0x0C	; 12
 20e:	ec e3       	ldi	r30, 0x3C	; 60
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	de 01       	movw	r26, r28
 214:	d1 96       	adiw	r26, 0x31	; 49
 216:	01 90       	ld	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	3a 95       	dec	r19
 21c:	e1 f7       	brne	.-8      	; 0x216 <program+0x96>
 21e:	fe 01       	movw	r30, r28
 220:	fd 96       	adiw	r30, 0x3d	; 61
 222:	34 e0       	ldi	r19, 0x04	; 4
 224:	df 01       	movw	r26, r30
 226:	1d 92       	st	X+, r1
 228:	3a 95       	dec	r19
 22a:	e9 f7       	brne	.-6      	; 0x226 <program+0xa6>
 22c:	30 e1       	ldi	r19, 0x10	; 16
 22e:	e1 e6       	ldi	r30, 0x61	; 97
 230:	f2 e0       	ldi	r31, 0x02	; 2
 232:	de 01       	movw	r26, r28
 234:	af 5b       	subi	r26, 0xBF	; 191
 236:	bf 4f       	sbci	r27, 0xFF	; 255
 238:	01 90       	ld	r0, Z+
 23a:	0d 92       	st	X+, r0
 23c:	3a 95       	dec	r19
 23e:	e1 f7       	brne	.-8      	; 0x238 <program+0xb8>
 240:	3b e0       	ldi	r19, 0x0B	; 11
 242:	ec e4       	ldi	r30, 0x4C	; 76
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	de 01       	movw	r26, r28
 248:	af 5a       	subi	r26, 0xAF	; 175
 24a:	bf 4f       	sbci	r27, 0xFF	; 255
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	3a 95       	dec	r19
 252:	e1 f7       	brne	.-8      	; 0x24c <program+0xcc>
 254:	e1 e5       	ldi	r30, 0x51	; 81
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ec 0f       	add	r30, r28
 25a:	fd 1f       	adc	r31, r29
 25c:	3b 96       	adiw	r30, 0x0b	; 11
 25e:	df 01       	movw	r26, r30
 260:	38 2f       	mov	r19, r24
 262:	1d 92       	st	X+, r1
 264:	3a 95       	dec	r19
 266:	e9 f7       	brne	.-6      	; 0x262 <program+0xe2>
 268:	39 e0       	ldi	r19, 0x09	; 9
 26a:	ec e5       	ldi	r30, 0x5C	; 92
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	de 01       	movw	r26, r28
 270:	af 59       	subi	r26, 0x9F	; 159
 272:	bf 4f       	sbci	r27, 0xFF	; 255
 274:	01 90       	ld	r0, Z+
 276:	0d 92       	st	X+, r0
 278:	3a 95       	dec	r19
 27a:	e1 f7       	brne	.-8      	; 0x274 <program+0xf4>
 27c:	37 e0       	ldi	r19, 0x07	; 7
 27e:	e1 e6       	ldi	r30, 0x61	; 97
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	39 96       	adiw	r30, 0x09	; 9
 288:	df 01       	movw	r26, r30
 28a:	43 2f       	mov	r20, r19
 28c:	1d 92       	st	X+, r1
 28e:	4a 95       	dec	r20
 290:	e9 f7       	brne	.-6      	; 0x28c <program+0x10c>
 292:	4a e0       	ldi	r20, 0x0A	; 10
 294:	ec e6       	ldi	r30, 0x6C	; 108
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	de 01       	movw	r26, r28
 29a:	af 58       	subi	r26, 0x8F	; 143
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	01 90       	ld	r0, Z+
 2a0:	0d 92       	st	X+, r0
 2a2:	4a 95       	dec	r20
 2a4:	e1 f7       	brne	.-8      	; 0x29e <program+0x11e>
 2a6:	e1 e7       	ldi	r30, 0x71	; 113
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ec 0f       	add	r30, r28
 2ac:	fd 1f       	adc	r31, r29
 2ae:	3a 96       	adiw	r30, 0x0a	; 10
 2b0:	df 01       	movw	r26, r30
 2b2:	49 2f       	mov	r20, r25
 2b4:	1d 92       	st	X+, r1
 2b6:	4a 95       	dec	r20
 2b8:	e9 f7       	brne	.-6      	; 0x2b4 <program+0x134>
 2ba:	4a e0       	ldi	r20, 0x0A	; 10
 2bc:	ec e7       	ldi	r30, 0x7C	; 124
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	de 01       	movw	r26, r28
 2c2:	af 57       	subi	r26, 0x7F	; 127
 2c4:	bf 4f       	sbci	r27, 0xFF	; 255
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	4a 95       	dec	r20
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <program+0x146>
 2ce:	e1 e8       	ldi	r30, 0x81	; 129
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ec 0f       	add	r30, r28
 2d4:	fd 1f       	adc	r31, r29
 2d6:	3a 96       	adiw	r30, 0x0a	; 10
 2d8:	df 01       	movw	r26, r30
 2da:	49 2f       	mov	r20, r25
 2dc:	1d 92       	st	X+, r1
 2de:	4a 95       	dec	r20
 2e0:	e9 f7       	brne	.-6      	; 0x2dc <program+0x15c>
 2e2:	4b e0       	ldi	r20, 0x0B	; 11
 2e4:	ec e8       	ldi	r30, 0x8C	; 140
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	af 56       	subi	r26, 0x6F	; 111
 2ec:	bf 4f       	sbci	r27, 0xFF	; 255
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	4a 95       	dec	r20
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <program+0x16e>
 2f6:	e1 e9       	ldi	r30, 0x91	; 145
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	3b 96       	adiw	r30, 0x0b	; 11
 300:	df 01       	movw	r26, r30
 302:	48 2f       	mov	r20, r24
 304:	1d 92       	st	X+, r1
 306:	4a 95       	dec	r20
 308:	e9 f7       	brne	.-6      	; 0x304 <program+0x184>
 30a:	4b e0       	ldi	r20, 0x0B	; 11
 30c:	ec e9       	ldi	r30, 0x9C	; 156
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	de 01       	movw	r26, r28
 312:	af 55       	subi	r26, 0x5F	; 95
 314:	bf 4f       	sbci	r27, 0xFF	; 255
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	4a 95       	dec	r20
 31c:	e1 f7       	brne	.-8      	; 0x316 <program+0x196>
 31e:	e1 ea       	ldi	r30, 0xA1	; 161
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ec 0f       	add	r30, r28
 324:	fd 1f       	adc	r31, r29
 326:	3b 96       	adiw	r30, 0x0b	; 11
 328:	df 01       	movw	r26, r30
 32a:	48 2f       	mov	r20, r24
 32c:	1d 92       	st	X+, r1
 32e:	4a 95       	dec	r20
 330:	e9 f7       	brne	.-6      	; 0x32c <program+0x1ac>
 332:	4b e0       	ldi	r20, 0x0B	; 11
 334:	ec ea       	ldi	r30, 0xAC	; 172
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	de 01       	movw	r26, r28
 33a:	af 54       	subi	r26, 0x4F	; 79
 33c:	bf 4f       	sbci	r27, 0xFF	; 255
 33e:	01 90       	ld	r0, Z+
 340:	0d 92       	st	X+, r0
 342:	4a 95       	dec	r20
 344:	e1 f7       	brne	.-8      	; 0x33e <program+0x1be>
 346:	e1 eb       	ldi	r30, 0xB1	; 177
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	ec 0f       	add	r30, r28
 34c:	fd 1f       	adc	r31, r29
 34e:	3b 96       	adiw	r30, 0x0b	; 11
 350:	df 01       	movw	r26, r30
 352:	48 2f       	mov	r20, r24
 354:	1d 92       	st	X+, r1
 356:	4a 95       	dec	r20
 358:	e9 f7       	brne	.-6      	; 0x354 <program+0x1d4>
 35a:	4b e0       	ldi	r20, 0x0B	; 11
 35c:	ec eb       	ldi	r30, 0xBC	; 188
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	de 01       	movw	r26, r28
 362:	af 53       	subi	r26, 0x3F	; 63
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	4a 95       	dec	r20
 36c:	e1 f7       	brne	.-8      	; 0x366 <program+0x1e6>
 36e:	e1 ec       	ldi	r30, 0xC1	; 193
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	3b 96       	adiw	r30, 0x0b	; 11
 378:	df 01       	movw	r26, r30
 37a:	48 2f       	mov	r20, r24
 37c:	1d 92       	st	X+, r1
 37e:	4a 95       	dec	r20
 380:	e9 f7       	brne	.-6      	; 0x37c <program+0x1fc>
 382:	4a e0       	ldi	r20, 0x0A	; 10
 384:	ec ec       	ldi	r30, 0xCC	; 204
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	de 01       	movw	r26, r28
 38a:	af 52       	subi	r26, 0x2F	; 47
 38c:	bf 4f       	sbci	r27, 0xFF	; 255
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	4a 95       	dec	r20
 394:	e1 f7       	brne	.-8      	; 0x38e <program+0x20e>
 396:	e1 ed       	ldi	r30, 0xD1	; 209
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	ec 0f       	add	r30, r28
 39c:	fd 1f       	adc	r31, r29
 39e:	3a 96       	adiw	r30, 0x0a	; 10
 3a0:	df 01       	movw	r26, r30
 3a2:	1d 92       	st	X+, r1
 3a4:	9a 95       	dec	r25
 3a6:	e9 f7       	brne	.-6      	; 0x3a2 <program+0x222>
 3a8:	9b e0       	ldi	r25, 0x0B	; 11
 3aa:	ec ed       	ldi	r30, 0xDC	; 220
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	de 01       	movw	r26, r28
 3b0:	af 51       	subi	r26, 0x1F	; 31
 3b2:	bf 4f       	sbci	r27, 0xFF	; 255
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	9a 95       	dec	r25
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <program+0x234>
 3bc:	e1 ee       	ldi	r30, 0xE1	; 225
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	ec 0f       	add	r30, r28
 3c2:	fd 1f       	adc	r31, r29
 3c4:	3b 96       	adiw	r30, 0x0b	; 11
 3c6:	df 01       	movw	r26, r30
 3c8:	48 2f       	mov	r20, r24
 3ca:	1d 92       	st	X+, r1
 3cc:	4a 95       	dec	r20
 3ce:	e9 f7       	brne	.-6      	; 0x3ca <program+0x24a>
 3d0:	99 e0       	ldi	r25, 0x09	; 9
 3d2:	ec ee       	ldi	r30, 0xEC	; 236
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	de 01       	movw	r26, r28
 3d8:	af 50       	subi	r26, 0x0F	; 15
 3da:	bf 4f       	sbci	r27, 0xFF	; 255
 3dc:	01 90       	ld	r0, Z+
 3de:	0d 92       	st	X+, r0
 3e0:	9a 95       	dec	r25
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <program+0x25c>
 3e4:	e1 ef       	ldi	r30, 0xF1	; 241
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ec 0f       	add	r30, r28
 3ea:	fd 1f       	adc	r31, r29
 3ec:	39 96       	adiw	r30, 0x09	; 9
 3ee:	df 01       	movw	r26, r30
 3f0:	1d 92       	st	X+, r1
 3f2:	3a 95       	dec	r19
 3f4:	e9 f7       	brne	.-6      	; 0x3f0 <program+0x270>
 3f6:	9d e0       	ldi	r25, 0x0D	; 13
 3f8:	ec ef       	ldi	r30, 0xFC	; 252
 3fa:	f1 e0       	ldi	r31, 0x01	; 1
 3fc:	de 01       	movw	r26, r28
 3fe:	af 5f       	subi	r26, 0xFF	; 255
 400:	be 4f       	sbci	r27, 0xFE	; 254
 402:	01 90       	ld	r0, Z+
 404:	0d 92       	st	X+, r0
 406:	9a 95       	dec	r25
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	e1 e0       	ldi	r30, 0x01	; 1
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	ec 0f       	add	r30, r28
 410:	fd 1f       	adc	r31, r29
 412:	3d 96       	adiw	r30, 0x0d	; 13
 414:	df 01       	movw	r26, r30
 416:	1d 92       	st	X+, r1
 418:	2a 95       	dec	r18
 41a:	e9 f7       	brne	.-6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41c:	9b e0       	ldi	r25, 0x0B	; 11
 41e:	ec e0       	ldi	r30, 0x0C	; 12
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	de 01       	movw	r26, r28
 424:	af 5e       	subi	r26, 0xEF	; 239
 426:	be 4f       	sbci	r27, 0xFE	; 254
 428:	01 90       	ld	r0, Z+
 42a:	0d 92       	st	X+, r0
 42c:	9a 95       	dec	r25
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	e1 e1       	ldi	r30, 0x11	; 17
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	ec 0f       	add	r30, r28
 436:	fd 1f       	adc	r31, r29
 438:	3b 96       	adiw	r30, 0x0b	; 11
 43a:	df 01       	movw	r26, r30
 43c:	1d 92       	st	X+, r1
 43e:	8a 95       	dec	r24
 440:	e9 f7       	brne	.-6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
								   "Correction",};   //17



	// display "programming"
	lcd_command(0x80); // Set cursor at the beginning of the first line
 442:	80 e8       	ldi	r24, 0x80	; 128
 444:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_string("  >Programming<"); // Display a string on the LCD
 448:	86 e3       	ldi	r24, 0x36	; 54
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
	//check if have password then display password entry 
	lcd_command(0xc0);
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_string("press (+)");
 456:	86 e4       	ldi	r24, 0x46	; 70
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
	
	
	while(1)
	{
		//check if plus is pressed change menu forward
		if(!(PINA & (1 << plus)))
 45e:	01 99       	sbic	0x00, 1	; 0
 460:	1a c0       	rjmp	.+52     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		{
			lcd_command(0xc0);  //set cursor to second line
 462:	80 ec       	ldi	r24, 0xC0	; 192
 464:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
			lcd_string("                ");//to clear one row
 468:	80 e5       	ldi	r24, 0x50	; 80
 46a:	92 e0       	ldi	r25, 0x02	; 2
 46c:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
 470:	bf ef       	ldi	r27, 0xFF	; 255
 472:	e4 e3       	ldi	r30, 0x34	; 52
 474:	fc e0       	ldi	r31, 0x0C	; 12
 476:	b1 50       	subi	r27, 0x01	; 1
 478:	e0 40       	sbci	r30, 0x00	; 0
 47a:	f0 40       	sbci	r31, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 480:	00 00       	nop
			_delay_ms(500);
			p++;
 482:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <p>
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <p>
			
			if (p > 17)
 48c:	82 31       	cpi	r24, 0x12	; 18
 48e:	f8 f0       	brcs	.+62     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			{
				p = 0;
 490:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <p>
 494:	1c c0       	rjmp	.+56     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			}
		//check if mins is pressed change menu backward
		}else if(!(PINA & (1 << mins)))
 496:	02 99       	sbic	0x00, 2	; 0
 498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		{
			lcd_command(0xc0);  //set cursor to second line
 49a:	80 ec       	ldi	r24, 0xC0	; 192
 49c:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
			lcd_string("                ");  //to clear one row
 4a0:	80 e5       	ldi	r24, 0x50	; 80
 4a2:	92 e0       	ldi	r25, 0x02	; 2
 4a4:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	34 e3       	ldi	r19, 0x34	; 52
 4ac:	4c e0       	ldi	r20, 0x0C	; 12
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	30 40       	sbci	r19, 0x00	; 0
 4b2:	40 40       	sbci	r20, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
			_delay_ms(500);
			p--;
 4ba:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <p>
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <p>
			if (p < 0 || p > 17)
 4c4:	82 31       	cpi	r24, 0x12	; 18
 4c6:	18 f0       	brcs	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			{
				p = 17;
 4c8:	81 e1       	ldi	r24, 0x11	; 17
 4ca:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <p>
			}
		
		}
		if(!(PINA & (1 << Enter)))
 4ce:	00 99       	sbic	0x00, 0	; 0
 4d0:	12 c0       	rjmp	.+36     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		{
			lcd_command(0x80);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
			lcd_string("                ");
 4d8:	80 e5       	ldi	r24, 0x50	; 80
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
			lcd_command(0xc0);
 4e0:	80 ec       	ldi	r24, 0xC0	; 192
 4e2:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
			lcd_string("                ");
 4e6:	80 e5       	ldi	r24, 0x50	; 80
 4e8:	92 e0       	ldi	r25, 0x02	; 2
 4ea:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
			parameterSelect(p);
 4ee:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <p>
 4f2:	0e 94 bb 00 	call	0x176	; 0x176 <parameterSelect>
		}
		lcd_command(0x80); // Set cursor at the beginning of the first line
 4f6:	80 e8       	ldi	r24, 0x80	; 128
 4f8:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
		lcd_string("  >Programming<"); // Display a string on the LCD
 4fc:	86 e3       	ldi	r24, 0x36	; 54
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>
		lcd_command(0xc0);//set cursor to second line
 504:	80 ec       	ldi	r24, 0xC0	; 192
 506:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
		lcd_string(Program_list[p]);
 50a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <p>
 50e:	a1 e0       	ldi	r26, 0x01	; 1
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	ac 0f       	add	r26, r28
 514:	bd 1f       	adc	r27, r29
 516:	e0 e1       	ldi	r30, 0x10	; 16
 518:	8e 9f       	mul	r24, r30
 51a:	a0 0d       	add	r26, r0
 51c:	b1 1d       	adc	r27, r1
 51e:	11 24       	eor	r1, r1
 520:	cd 01       	movw	r24, r26
 522:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_string>

	}
 526:	9b cf       	rjmp	.-202    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>

00000528 <lcd_command>:

 void lcd_command(unsigned char cmd) //sending commands to LCD to control enable and disable it
 {
	
	//LCD_PORT = cmd; //to pass data to LCD
	lcd_shiftOut(cmd);
 528:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <lcd_shiftOut>
	PORTD &= ~(1 << LCD_RS); //set RS pin low for command mode
 52c:	8b b1       	in	r24, 0x0b	; 11
 52e:	8f 7e       	andi	r24, 0xEF	; 239
 530:	8b b9       	out	0x0b, r24	; 11
	PORTA |= (1 << LCD_EN); //set EN high to enable LCd
 532:	82 b1       	in	r24, 0x02	; 2
 534:	88 60       	ori	r24, 0x08	; 8
 536:	82 b9       	out	0x02, r24	; 2
 538:	8f e1       	ldi	r24, 0x1F	; 31
 53a:	9e e4       	ldi	r25, 0x4E	; 78
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <lcd_command+0x14>
 540:	00 c0       	rjmp	.+0      	; 0x542 <lcd_command+0x1a>
 542:	00 00       	nop
	_delay_ms(10);
	PORTA &= ~(1 << LCD_EN); //set EN low to disable LCD
 544:	82 b1       	in	r24, 0x02	; 2
 546:	87 7f       	andi	r24, 0xF7	; 247
 548:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	95 e8       	ldi	r25, 0x85	; 133
 54c:	9a 95       	dec	r25
 54e:	f1 f7       	brne	.-4      	; 0x54c <lcd_command+0x24>
 550:	00 00       	nop
 552:	08 95       	ret

00000554 <lcd_init>:

 void lcd_init(void)
 {
	//set LCD data port as output
	//LCD_PORT = 0x00; // use it when lcd connected directly
	DDRD |= (1 << LCD_RS); 
 554:	8a b1       	in	r24, 0x0a	; 10
 556:	80 61       	ori	r24, 0x10	; 16
 558:	8a b9       	out	0x0a, r24	; 10
	DDRA |= (1 << LCD_EN); 
 55a:	81 b1       	in	r24, 0x01	; 1
 55c:	88 60       	ori	r24, 0x08	; 8
 55e:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1 << LCD_EN); //set PA3 low
 560:	82 b1       	in	r24, 0x02	; 2
 562:	87 7f       	andi	r24, 0xF7	; 247
 564:	82 b9       	out	0x02, r24	; 2
	shiftInit();
 566:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <shiftInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 56a:	2f ef       	ldi	r18, 0xFF	; 255
 56c:	80 e7       	ldi	r24, 0x70	; 112
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <lcd_init+0x1c>
 578:	00 c0       	rjmp	.+0      	; 0x57a <lcd_init+0x26>
 57a:	00 00       	nop
	//wait for LCD to power up
	_delay_ms(100);

	// send initialization commands to LCD

	lcd_command(0x38); //8-bit mode, 2-line display, 5*8 font
 57c:	88 e3       	ldi	r24, 0x38	; 56
 57e:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_command(0x0C); // Display on, cursor off, blink off
 582:	8c e0       	ldi	r24, 0x0C	; 12
 584:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_command(0x01); //clear display
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
	lcd_command(0x06); //increment cursor, no shift 
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	0e 94 94 02 	call	0x528	; 0x528 <lcd_command>
 594:	08 95       	ret

00000596 <lcd_data>:
 }

 void lcd_data(unsigned char data)
 {
	//LCD_PORT = data; //send data using whole port
	lcd_shiftOut(data); //send data using shift register
 596:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <lcd_shiftOut>
	PORTD |= (1 << LCD_RS); //set RS high for data mode
 59a:	8b b1       	in	r24, 0x0b	; 11
 59c:	80 61       	ori	r24, 0x10	; 16
 59e:	8b b9       	out	0x0b, r24	; 11
	PORTA |= (1 << LCD_EN); // Set EN pin high to enable LCD
 5a0:	82 b1       	in	r24, 0x02	; 2
 5a2:	88 60       	ori	r24, 0x08	; 8
 5a4:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a6:	8a e1       	ldi	r24, 0x1A	; 26
 5a8:	8a 95       	dec	r24
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_data+0x12>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <lcd_data+0x18>
	_delay_us(10);
	PORTA &= ~(1 << LCD_EN); // Set EN pin low to disable LCD
 5ae:	82 b1       	in	r24, 0x02	; 2
 5b0:	87 7f       	andi	r24, 0xF7	; 247
 5b2:	82 b9       	out	0x02, r24	; 2
 5b4:	85 e8       	ldi	r24, 0x85	; 133
 5b6:	8a 95       	dec	r24
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <lcd_data+0x20>
 5ba:	00 00       	nop
 5bc:	08 95       	ret

000005be <lcd_string>:
	_delay_us(50);
 }

 void lcd_string(char *str)
 {
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ec 01       	movw	r28, r24
	while(*str)
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <lcd_string+0xe>
	{
		lcd_data(*str++);
 5c6:	21 96       	adiw	r28, 0x01	; 1
 5c8:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_data>
	_delay_us(50);
 }

 void lcd_string(char *str)
 {
	while(*str)
 5cc:	88 81       	ld	r24, Y
 5ce:	81 11       	cpse	r24, r1
 5d0:	fa cf       	rjmp	.-12     	; 0x5c6 <lcd_string+0x8>
	{
		lcd_data(*str++);
	}
 }
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <shiftInit>:
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
}

void lcd_shiftReset(void) {
	PORTD &= ~(1 << SR_LATCH_PIN);
 5d8:	8a b1       	in	r24, 0x0a	; 10
 5da:	80 6e       	ori	r24, 0xE0	; 224
 5dc:	8a b9       	out	0x0a, r24	; 10
 5de:	87 b1       	in	r24, 0x07	; 7
 5e0:	8e 60       	ori	r24, 0x0E	; 14
 5e2:	87 b9       	out	0x07, r24	; 7
 5e4:	8b b1       	in	r24, 0x0b	; 11
 5e6:	8f 7b       	andi	r24, 0xBF	; 191
 5e8:	8b b9       	out	0x0b, r24	; 11
 5ea:	88 b1       	in	r24, 0x08	; 8
 5ec:	8d 7f       	andi	r24, 0xFD	; 253
 5ee:	88 b9       	out	0x08, r24	; 8
 5f0:	08 95       	ret

000005f2 <lcd_shiftOut>:
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	18 c0       	rjmp	.+48     	; 0x626 <lcd_shiftOut+0x34>
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	09 2e       	mov	r0, r25
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <lcd_shiftOut+0x10>
 5fe:	35 95       	asr	r19
 600:	27 95       	ror	r18
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <lcd_shiftOut+0xc>
 606:	20 ff       	sbrs	r18, 0
 608:	04 c0       	rjmp	.+8      	; 0x612 <lcd_shiftOut+0x20>
 60a:	2b b1       	in	r18, 0x0b	; 11
 60c:	20 62       	ori	r18, 0x20	; 32
 60e:	2b b9       	out	0x0b, r18	; 11
 610:	03 c0       	rjmp	.+6      	; 0x618 <lcd_shiftOut+0x26>
 612:	2b b1       	in	r18, 0x0b	; 11
 614:	2f 7d       	andi	r18, 0xDF	; 223
 616:	2b b9       	out	0x0b, r18	; 11
 618:	28 b1       	in	r18, 0x08	; 8
 61a:	22 60       	ori	r18, 0x02	; 2
 61c:	28 b9       	out	0x08, r18	; 8
 61e:	28 b1       	in	r18, 0x08	; 8
 620:	2d 7f       	andi	r18, 0xFD	; 253
 622:	28 b9       	out	0x08, r18	; 8
 624:	9f 5f       	subi	r25, 0xFF	; 255
 626:	98 30       	cpi	r25, 0x08	; 8
 628:	30 f3       	brcs	.-52     	; 0x5f6 <lcd_shiftOut+0x4>
 62a:	8b b1       	in	r24, 0x0b	; 11
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	8b b9       	out	0x0b, r24	; 11
 630:	08 95       	ret

00000632 <dis_shiftOut>:
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	18 c0       	rjmp	.+48     	; 0x666 <dis_shiftOut+0x34>
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	09 2e       	mov	r0, r25
 63c:	02 c0       	rjmp	.+4      	; 0x642 <dis_shiftOut+0x10>
 63e:	35 95       	asr	r19
 640:	27 95       	ror	r18
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <dis_shiftOut+0xc>
 646:	20 ff       	sbrs	r18, 0
 648:	04 c0       	rjmp	.+8      	; 0x652 <dis_shiftOut+0x20>
 64a:	2b b1       	in	r18, 0x0b	; 11
 64c:	20 62       	ori	r18, 0x20	; 32
 64e:	2b b9       	out	0x0b, r18	; 11
 650:	03 c0       	rjmp	.+6      	; 0x658 <dis_shiftOut+0x26>
 652:	2b b1       	in	r18, 0x0b	; 11
 654:	2f 7d       	andi	r18, 0xDF	; 223
 656:	2b b9       	out	0x0b, r18	; 11
 658:	2b b1       	in	r18, 0x0b	; 11
 65a:	20 64       	ori	r18, 0x40	; 64
 65c:	2b b9       	out	0x0b, r18	; 11
 65e:	2b b1       	in	r18, 0x0b	; 11
 660:	2f 7b       	andi	r18, 0xBF	; 191
 662:	2b b9       	out	0x0b, r18	; 11
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	98 30       	cpi	r25, 0x08	; 8
 668:	30 f3       	brcs	.-52     	; 0x636 <dis_shiftOut+0x4>
 66a:	8b b1       	in	r24, 0x0b	; 11
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	8b b9       	out	0x0b, r24	; 11
 670:	08 95       	ret

00000672 <inc_shiftOut>:
}

void inc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	18 c0       	rjmp	.+48     	; 0x6a6 <inc_shiftOut+0x34>
		if (data & (1 << i)) {
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	09 2e       	mov	r0, r25
 67c:	02 c0       	rjmp	.+4      	; 0x682 <inc_shiftOut+0x10>
 67e:	35 95       	asr	r19
 680:	27 95       	ror	r18
 682:	0a 94       	dec	r0
 684:	e2 f7       	brpl	.-8      	; 0x67e <inc_shiftOut+0xc>
 686:	20 ff       	sbrs	r18, 0
 688:	04 c0       	rjmp	.+8      	; 0x692 <inc_shiftOut+0x20>
			PORTD |= (1 << SR_DATA_PIN);
 68a:	2b b1       	in	r18, 0x0b	; 11
 68c:	20 62       	ori	r18, 0x20	; 32
 68e:	2b b9       	out	0x0b, r18	; 11
 690:	03 c0       	rjmp	.+6      	; 0x698 <inc_shiftOut+0x26>
			} else {
			PORTD &= ~(1 << SR_DATA_PIN);
 692:	2b b1       	in	r18, 0x0b	; 11
 694:	2f 7d       	andi	r18, 0xDF	; 223
 696:	2b b9       	out	0x0b, r18	; 11
		}
		
		PORTC |= (1 << INC_CLK_PIN);
 698:	28 b1       	in	r18, 0x08	; 8
 69a:	24 60       	ori	r18, 0x04	; 4
 69c:	28 b9       	out	0x08, r18	; 8
		PORTC &= ~(1 << INC_CLK_PIN);
 69e:	28 b1       	in	r18, 0x08	; 8
 6a0:	2b 7f       	andi	r18, 0xFB	; 251
 6a2:	28 b9       	out	0x08, r18	; 8
void lcd_shiftReset(void) {
	PORTD &= ~(1 << SR_LATCH_PIN);
}

void inc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	98 30       	cpi	r25, 0x08	; 8
 6a8:	30 f3       	brcs	.-52     	; 0x676 <inc_shiftOut+0x4>
		PORTC |= (1 << INC_CLK_PIN);
		PORTC &= ~(1 << INC_CLK_PIN);
	}
	
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
 6aa:	8b b1       	in	r24, 0x0b	; 11
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	8b b9       	out	0x0b, r24	; 11
 6b0:	08 95       	ret

000006b2 <exc_shiftOut>:
}
void exc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	18 c0       	rjmp	.+48     	; 0x6e6 <exc_shiftOut+0x34>
		if (data & (1 << i)) {
 6b6:	28 2f       	mov	r18, r24
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	09 2e       	mov	r0, r25
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <exc_shiftOut+0x10>
 6be:	35 95       	asr	r19
 6c0:	27 95       	ror	r18
 6c2:	0a 94       	dec	r0
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <exc_shiftOut+0xc>
 6c6:	20 ff       	sbrs	r18, 0
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <exc_shiftOut+0x20>
			PORTD |= (1 << SR_DATA_PIN);
 6ca:	2b b1       	in	r18, 0x0b	; 11
 6cc:	20 62       	ori	r18, 0x20	; 32
 6ce:	2b b9       	out	0x0b, r18	; 11
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <exc_shiftOut+0x26>
			} else {
			PORTD &= ~(1 << SR_DATA_PIN);
 6d2:	2b b1       	in	r18, 0x0b	; 11
 6d4:	2f 7d       	andi	r18, 0xDF	; 223
 6d6:	2b b9       	out	0x0b, r18	; 11
		}
		
		PORTC |= (1 << EXC_CLK_PIN);
 6d8:	28 b1       	in	r18, 0x08	; 8
 6da:	28 60       	ori	r18, 0x08	; 8
 6dc:	28 b9       	out	0x08, r18	; 8
		PORTC &= ~(1 << EXC_CLK_PIN);
 6de:	28 b1       	in	r18, 0x08	; 8
 6e0:	27 7f       	andi	r18, 0xF7	; 247
 6e2:	28 b9       	out	0x08, r18	; 8
	
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
}
void exc_shiftOut(uint8_t data){
	for (uint8_t i = 0; i < 8; i++) {
 6e4:	9f 5f       	subi	r25, 0xFF	; 255
 6e6:	98 30       	cpi	r25, 0x08	; 8
 6e8:	30 f3       	brcs	.-52     	; 0x6b6 <exc_shiftOut+0x4>
		PORTC |= (1 << EXC_CLK_PIN);
		PORTC &= ~(1 << EXC_CLK_PIN);
	}
	
	// Set latch pin high
	PORTD |= (1 << SR_LATCH_PIN);
 6ea:	8b b1       	in	r24, 0x0b	; 11
 6ec:	80 68       	ori	r24, 0x80	; 128
 6ee:	8b b9       	out	0x0b, r24	; 11
 6f0:	08 95       	ret

000006f2 <main>:
#include "./APPLICATION/APP.h"


int main() {
 	
	checking();
 6f2:	0e 94 5d 00 	call	0xba	; 0xba <checking>

 	while(1)
	{
		appStart();
 6f6:	0e 94 9a 00 	call	0x134	; 0x134 <appStart>
 6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <main+0x4>

000006fc <_exit>:
 6fc:	f8 94       	cli

000006fe <__stop_program>:
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <__stop_program>
